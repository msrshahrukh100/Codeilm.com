{"version":3,"sources":["../node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","../node_modules/@material-ui/core/esm/Container/Container.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/d3-geo/src/adder.js","../node_modules/d3-geo/src/math.js","../node_modules/d3-geo/src/noop.js","../node_modules/d3-geo/src/stream.js","../node_modules/d3-geo/src/area.js","../node_modules/d3-geo/src/cartesian.js","../node_modules/d3-geo/src/bounds.js","../node_modules/d3-geo/src/centroid.js","../node_modules/d3-geo/src/compose.js","../node_modules/d3-geo/src/rotation.js","../node_modules/d3-geo/src/circle.js","../node_modules/d3-geo/src/clip/buffer.js","../node_modules/d3-geo/src/pointEqual.js","../node_modules/d3-geo/src/clip/rejoin.js","../node_modules/d3-geo/src/polygonContains.js","../node_modules/d3-array/src/ascending.js","../node_modules/d3-array/src/bisect.js","../node_modules/d3-array/src/bisector.js","../node_modules/d3-array/src/cross.js","../node_modules/d3-array/src/array.js","../node_modules/d3-array/src/ticks.js","../node_modules/d3-array/src/threshold/sturges.js","../node_modules/d3-array/src/merge.js","../node_modules/d3-array/src/zip.js","../node_modules/d3-geo/src/clip/index.js","../node_modules/d3-geo/src/clip/antimeridian.js","../node_modules/d3-geo/src/clip/circle.js","../node_modules/d3-geo/src/clip/line.js","../node_modules/d3-geo/src/clip/rectangle.js","../node_modules/d3-geo/src/length.js","../node_modules/d3-geo/src/interpolate.js","../node_modules/d3-geo/src/path/area.js","../node_modules/d3-geo/src/identity.js","../node_modules/d3-geo/src/path/bounds.js","../node_modules/d3-geo/src/path/centroid.js","../node_modules/d3-geo/src/path/context.js","../node_modules/d3-geo/src/path/measure.js","../node_modules/d3-geo/src/path/string.js","../node_modules/d3-geo/src/path/index.js","../node_modules/d3-geo/src/transform.js","../node_modules/d3-geo/src/projection/fit.js","../node_modules/d3-geo/src/projection/resample.js","../node_modules/d3-geo/src/projection/index.js","../node_modules/d3-geo/src/projection/azimuthal.js","../node_modules/d3-geo/src/projection/azimuthalEqualArea.js","../node_modules/d3-geo/src/projection/azimuthalEquidistant.js","../node_modules/d3-geo/src/projection/mercator.js","../node_modules/d3-geo/src/projection/equirectangular.js","../node_modules/d3-geo/src/projection/conicEquidistant.js","../node_modules/d3-geo/src/projection/equalEarth.js","../node_modules/d3-geo/src/projection/gnomonic.js","../node_modules/d3-geo/src/projection/naturalEarth1.js","../node_modules/d3-geo/src/projection/orthographic.js","../node_modules/d3-geo/src/projection/stereographic.js","../node_modules/d3-geo/src/projection/transverseMercator.js","../node_modules/d3-geo/src/index.js","../node_modules/topojson-client/src/identity.js","../node_modules/topojson-client/src/transform.js","../node_modules/topojson-client/src/reverse.js","../node_modules/topojson-client/src/feature.js","../node_modules/topojson-client/index.js"],"names":["_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default","n","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","clsx__WEBPACK_IMPORTED_MODULE_4__","_styles_withStyles__WEBPACK_IMPORTED_MODULE_5__","_List_ListContext__WEBPACK_IMPORTED_MODULE_6__","ListItemAvatar","a","forwardRef","props","ref","classes","className","other","context","useContext","createElement","Object","root","alignItems","alignItemsFlexStart","__webpack_exports__","minWidth","flexShrink","marginTop","name","_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default","react__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_3___default","clsx__WEBPACK_IMPORTED_MODULE_5__","_styles__WEBPACK_IMPORTED_MODULE_6__","_utils__WEBPACK_IMPORTED_MODULE_7__","Container","_props$component","component","Component","_props$fixed","fixed","_props$maxWidth","maxWidth","concat","String","theme","_root","width","marginLeft","boxSizing","marginRight","paddingLeft","spacing","paddingRight","breakpoints","up","keys","values","reduce","acc","breakpoint","value","maxWidthXs","Math","max","xs","maxWidthSm","sm","maxWidthMd","md","maxWidthLg","lg","maxWidthXl","xl","_classCallCheck","instance","Constructor","TypeError","d","_possibleConstructorReturn","_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__","_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__","self","call","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_inherits","subClass","superClass","prototype","create","constructor","writable","configurable","_typeof2","obj","Symbol","iterator","_typeof","adder","Adder","this","reset","s","t","add","y","_add","temp","valueOf","b","x","bv","av","epsilon","pi","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","exp","ceil","log","floor","sin","pow","sqrt","sign","tan","acos","asin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","type","streamObjectType","Feature","object","FeatureCollection","features","i","length","Sphere","sphere","Point","coordinates","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","src_stream","cartesian_spherical","cartesian","cartesian_cartesian","spherical","lambda","phi","cosPhi","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","k","cartesianNormalizeInPlace","l","compose","invert","rotationIdentity","round","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","z","src_rotation","rotate","forward","circleStream","radius","delta","direction","t0","t1","cosRadius","sinRadius","step","circleRadius","buffer","line","lines","push","rejoin","pop","shift","result","pointEqual","Intersection","points","entry","e","v","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p0","p1","sort","rejoin_link","start","current","isSubject","array","polygonContains_sum","polygonContains","polygon","sinPhi","normal","angle","winding","m","ring","point0","lambda0","phi0","sinPhi0","cosPhi0","j","lambda1","sinPhi1","cosPhi1","point1","phi1","absDelta","antimeridian","arc","intersection","phiArc","ascending","NaN","ascendingBisect","compare","f","left","lo","hi","mid","right","bisector","array_array","Array","slice","map","merge","arrays","merged","src_clip","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","clip_compareIntersection","pointLine","clean","ringSegments","filter","validSegment","clip_antimeridian","_clean","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","from","to","clip_circle","cr","smallRadius","notHemisphere","visible","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","u","w","uu","t2","q","polar","q1","code","r","c0","v0","v00","point2","c","clip_line","x0","y0","x1","y1","ax","ay","dx","dy","clipMax","clipMin","clipRectangle","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","a0","b0","b1","polygonInside","cleanInside","min","area_x00","area_y00","area_x0","area_y0","src_identity","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area","area_areaPointFirst","area_areaPoint","path_area","bounds_x0","Infinity","bounds_y0","bounds_x1","bounds_y1","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_bounds","bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroid","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","PathContext","_context","_radius","pointRadius","_","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","PathString","_string","string_circle","_circle","join","src_path","projection","projectionStream","contextStream","path","apply","arguments","transformer","methods","TransformStream","key","fit","fitBounds","clipExtent","scale","translate","fit_fitExtent","extent","h","fit_fitSize","size","fit_fitWidth","fit_fitHeight","height","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","bi","ci","fi","transform","projection_projection","projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","postclip","recenter","center","transformRotate","undefined","clipAngle","precision","fitExtent","fitSize","fitWidth","fitHeight","azimuthalRaw","cx","cy","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEquidistantRaw","mercatorRaw","mercator","mercatorProjection","reclip","equirectangularRaw","A1","A2","A3","A4","M","equalEarthRaw","l2","l6","gnomonicRaw","naturalEarth1Raw","phi4","orthographicRaw","stereographicRaw","transverseMercatorRaw","identity","src_transform","kx","ky","input","output","reverse","feature","topology","feature_feature","id","bbox","properties","feature_object","transformPoint","arcs"],"mappings":"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","file":"static/js/11.9fa7ec90.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes = {\n  /**\n   * The content of the component – normally `Avatar`.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '../styles';\nimport { capitalize } from '../utils';\nexport var styles = function styles(theme) {\n  var _root;\n\n  return {\n    /* Styles applied to the root element. */\n    root: (_root = {\n      width: '100%',\n      marginLeft: 'auto',\n      boxSizing: 'border-box',\n      marginRight: 'auto',\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2)\n    }, _defineProperty(_root, theme.breakpoints.up('sm'), {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }), _defineProperty(_root, theme.breakpoints.up('md'), {\n      paddingLeft: theme.spacing(4),\n      paddingRight: theme.spacing(4)\n    }), _root),\n\n    /* Styles applied to the root element if `fixed={true}`. */\n    fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {\n      var value = theme.breakpoints.values[breakpoint];\n\n      if (value !== 0) {\n        acc[theme.breakpoints.up(breakpoint)] = {\n          maxWidth: value\n        };\n      }\n\n      return acc;\n    }, {}),\n\n    /* Styles applied to the root element if `maxWidth=\"xs\"`. */\n    maxWidthXs: _defineProperty({}, theme.breakpoints.up('xs'), {\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"sm\"`. */\n    maxWidthSm: _defineProperty({}, theme.breakpoints.up('sm'), {\n      maxWidth: theme.breakpoints.values.sm\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"md\"`. */\n    maxWidthMd: _defineProperty({}, theme.breakpoints.up('md'), {\n      maxWidth: theme.breakpoints.values.md\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"lg\"`. */\n    maxWidthLg: _defineProperty({}, theme.breakpoints.up('lg'), {\n      maxWidth: theme.breakpoints.values.lg\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"xl\"`. */\n    maxWidthXl: _defineProperty({}, theme.breakpoints.up('xl'), {\n      maxWidth: theme.breakpoints.values.xl\n    })\n  };\n};\nvar Container = React.forwardRef(function Container(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$fixed = props.fixed,\n      fixed = _props$fixed === void 0 ? false : _props$fixed,\n      _props$maxWidth = props.maxWidth,\n      maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"fixed\", \"maxWidth\"]);\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className, fixed && classes.fixed, maxWidth !== false && classes[\"maxWidth\".concat(capitalize(String(maxWidth)))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes = {\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiContainer'\n})(Container);","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\nexport default function () {\n  return new Adder();\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function reset() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function add(y) {\n    _add(temp, y, this.t);\n\n    _add(this, temp.s, this.s);\n\n    if (this.s) this.t += temp.t;else this.s = temp.t;\n  },\n  valueOf: function valueOf() {\n    return this.s;\n  }\n};\nvar temp = new Adder();\n\nfunction _add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = a - av + (b - bv);\n}","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function (x) {\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}","export default function noop() {}","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function Feature(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function FeatureCollection(object, stream) {\n    var features = object.features,\n        i = -1,\n        n = features.length;\n\n    while (++i < n) {\n      streamGeometry(features[i].geometry, stream);\n    }\n  }\n};\nvar streamGeometryType = {\n  Sphere: function Sphere(object, stream) {\n    stream.sphere();\n  },\n  Point: function Point(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function MultiPoint(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    }\n  },\n  LineString: function LineString(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function MultiLineString(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      streamLine(coordinates[i], stream, 0);\n    }\n  },\n  Polygon: function Polygon(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function MultiPolygon(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      streamPolygon(coordinates[i], stream);\n    }\n  },\n  GeometryCollection: function GeometryCollection(object, stream) {\n    var geometries = object.geometries,\n        i = -1,\n        n = geometries.length;\n\n    while (++i < n) {\n      streamGeometry(geometries[i], stream);\n    }\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1,\n      n = coordinates.length - closed,\n      coordinate;\n  stream.lineStart();\n\n  while (++i < n) {\n    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  }\n\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1,\n      n = coordinates.length;\n  stream.polygonStart();\n\n  while (++i < n) {\n    streamLine(coordinates[i], stream, 1);\n  }\n\n  stream.polygonEnd();\n}\n\nexport default function (object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}","import adder from \"./adder\";\nimport { atan2, cos, quarterPi, radians, sin, tau } from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\nexport var areaRingSum = adder();\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function polygonStart() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function sphere() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u)); // Advance the previous points.\n\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function (object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}","import { asin, atan2, cos, sin, sqrt } from \"./math\";\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\nexport function cartesian(spherical) {\n  var lambda = spherical[0],\n      phi = spherical[1],\n      cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n} // TODO return a\n\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n} // TODO return d\n\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}","import adder from \"./adder\";\nimport { areaStream, areaRingSum } from \"./area\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace, spherical } from \"./cartesian\";\nimport { abs, degrees, epsilon, radians } from \"./math\";\nimport stream from \"./stream\";\nvar lambda0,\n    phi0,\n    lambda1,\n    phi1,\n    // bounds\nlambda2,\n    // previous lambda-coordinate\nlambda00,\n    phi00,\n    // first point\np0,\n    // previous 3D point\ndeltaSum = adder(),\n    ranges,\n    range;\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function polygonStart() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function polygonEnd() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > epsilon) phi1 = 90;else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n} // Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\n\n\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function (feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream); // First, sort ranges by their minimum longitudes.\n\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.\n\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    } // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n\n\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];\n}","import { asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt } from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\nvar W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point\nx0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function polygonStart() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n}; // Arithmetic mean of Cartesian vectors.\n\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\n\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m),\n      // line weight = angle\n  v = m && -w / m; // area weight multiplier\n\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function (object) {\n  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.\n\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.\n\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}","export default function (a, b) {\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function (x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n  return compose;\n}","import compose from \"./compose\";\nimport { abs, asin, atan2, cos, degrees, pi, radians, sin, tau } from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function (lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];\n  }\n\n  rotation.invert = function (lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];\n  };\n\n  return rotation;\n}\n\nexport default function (rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function (coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}","import { cartesian, cartesianNormalizeInPlace, spherical } from \"./cartesian\";\nimport constant from \"./constant\";\nimport { acos, cos, degrees, epsilon, radians, sin, tau } from \"./math\";\nimport { rotateRadians } from \"./rotation\"; // Generates a circle centered at [0°, 0°], with a given radius and precision.\n\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function () {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {\n    point: point\n  };\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {\n      type: \"Polygon\",\n      coordinates: [ring]\n    };\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function (_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function (_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}","import noop from \"../noop\";\nexport default function () {\n  var lines = [],\n      line;\n  return {\n    point: function point(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function lineStart() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function rejoin() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function result() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}","import { abs, epsilon } from \"./math\";\nexport default function (a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n\n  this.e = entry; // is an entry?\n\n  this.v = false; // visited\n\n  this.n = this.p = null; // next & previous\n} // A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\n\n\nexport default function (segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n  segments.forEach(function (segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n,\n        p0 = segment[0],\n        p1 = segment[n],\n        x; // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n\n      for (i = 0; i < n; ++i) {\n        stream.point((p0 = segment[i])[0], p0[1]);\n      }\n\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n  if (!subject.length) return;\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n\n    while (current.v) {\n      if ((current = current.n) === start) return;\n    }\n\n    points = current.z;\n    stream.lineStart();\n\n    do {\n      current.v = current.o.v = true;\n\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n\n          for (i = points.length - 1; i >= 0; --i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n\n        current = current.p;\n      }\n\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n\n  a.n = b = array[0];\n  b.p = a;\n}","import adder from \"./adder\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace } from \"./cartesian\";\nimport { asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sin, tau } from \"./math\";\nvar sum = adder();\nexport default function (polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n  sum.reset();\n  if (sinPhi === 1) phi = halfPi + epsilon;else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta; // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  } // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;\n}","export default function (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;","import ascending from \"./ascending\";\nexport default function (compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending(f(d), x);\n  };\n}","import { pair } from \"./pairs\";\nexport default function (values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}","var array = Array.prototype;\nexport var slice = array.slice;\nexport var map = array.map;","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\nexport default function (start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}","export default function (values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}","export default function (arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) {\n    j += arrays[i].length;\n  }\n\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}","import transpose from \"./transpose\";\nexport default function () {\n  return transpose(arguments);\n}","import clipBuffer from \"./buffer\";\nimport clipRejoin from \"./rejoin\";\nimport { epsilon, halfPi } from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport { merge } from \"d3-array\";\nexport default function (pointVisible, clipLine, interpolate, start) {\n  return function (sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function polygonEnd() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function sphere() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i,\n          n = ringSegments.length,\n          m,\n          segment,\n          point;\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n      if (!n) return; // No intersections.\n\n      if (clean & 1) {\n        segment = ringSegments[0];\n\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n\n          for (i = 0; i < m; ++i) {\n            sink.point((point = segment[i])[0], point[1]);\n          }\n\n          sink.lineEnd();\n        }\n\n        return;\n      } // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n\n\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n} // Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\n\n\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}","import clip from \"./index\";\nimport { abs, atan, cos, epsilon, halfPi, pi, sin } from \"../math\";\nexport default clip(function () {\n  return true;\n}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\n\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      _clean; // no intersections\n\n\n  return {\n    lineStart: function lineStart() {\n      stream.lineStart();\n      _clean = 1;\n    },\n    point: function point(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n\n      if (abs(delta - pi) < epsilon) {\n        // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        _clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) {\n        // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        _clean = 0;\n      }\n\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function lineEnd() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function clean() {\n      return 2 - _clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}","import { cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical } from \"../cartesian\";\nimport { circleStream } from \"../circle\";\nimport { abs, cos, epsilon, pi, radians, sqrt } from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\nexport default function (radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  } // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n\n\n  function clipLine(stream) {\n    var point0, // previous point\n    c0, // code for previous point\n    v0, // visibility of previous point\n    v00, // visibility of first point\n    _clean; // no intersections\n\n\n    return {\n      lineStart: function lineStart() {\n        v00 = v0 = false;\n        _clean = 1;\n      },\n      point: function point(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n\n        if (v !== v0) {\n          _clean = 0;\n\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t; // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            _clean = 0;\n\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function lineEnd() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function clean() {\n        return _clean | (v00 && v0) << 1;\n      }\n    };\n  } // Intersects the great circle between a and b with the clip circle.\n\n\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n\n    var n1 = [1, 0, 0],\n        // normal\n    n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0],\n        // cartesianDot(n1, n2),\n    determinant = n2n2 - n1n2 * n1n2; // Two polar points.\n\n    if (!determinant) return !two && a;\n    var c1 = cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.\n\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n    if (t2 < 0) return;\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n    if (!two) return q; // Two intersection points.\n\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.\n\n    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  } // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n\n\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}","export default function (a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}","import { abs, epsilon } from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipRejoin from \"./rejoin\";\nimport { merge } from \"d3-array\";\nvar clipMax = 1e9,\n    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0,\n        a1 = 0;\n\n    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {\n      do {\n        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      } while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n  }\n\n  return function (stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__,\n        y__,\n        v__,\n        // first point\n    x_,\n        y_,\n        v_,\n        // previous point\n    first,\n        clean;\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n\n          if (a1 <= y1) {\n            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;\n          } else {\n            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;\n          }\n        }\n      }\n\n      return winding;\n    } // Buffer geometry within a polygon and then clip it en masse.\n\n\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n\n      if (cleanInside || visible) {\n        stream.polygonStart();\n\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n\n        stream.polygonEnd();\n      }\n\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    } // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n\n\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}","import adder from \"./adder\";\nimport { abs, atan2, cos, radians, sin, sqrt } from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function (object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}","import { asin, atan2, cos, degrees, haversin, radians, sin, sqrt } from \"./math\";\nexport default function (a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n  var interpolate = d ? function (t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [atan2(y, x) * degrees, atan2(z, sqrt(x * x + y * y)) * degrees];\n  } : function () {\n    return [x0 * degrees, y0 * degrees];\n  };\n  interpolate.distance = d;\n  return interpolate;\n}","import adder from \"../adder\";\nimport { abs } from \"../math\";\nimport noop from \"../noop\";\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function polygonStart() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function result() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;","export default function (x) {\n  return x;\n}","import noop from \"../noop\";\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function result() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;","import { sqrt } from \"../math\"; // TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function polygonStart() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function result() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];\n    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;","import { tau } from \"../math\";\nimport noop from \"../noop\";\nexport default function PathContext(context) {\n  this._context = context;\n}\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function pointRadius(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function polygonStart() {\n    this._line = 0;\n  },\n  polygonEnd: function polygonEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._context.moveTo(x, y);\n\n          this._point = 1;\n          break;\n        }\n\n      case 1:\n        {\n          this._context.lineTo(x, y);\n\n          break;\n        }\n\n      default:\n        {\n          this._context.moveTo(x + this._radius, y);\n\n          this._context.arc(x, y, this._radius, 0, tau);\n\n          break;\n        }\n    }\n  },\n  result: noop\n};","import adder from \"../adder\";\nimport { sqrt } from \"../math\";\nimport noop from \"../noop\";\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\nvar lengthStream = {\n  point: noop,\n  lineStart: function lineStart() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function lineEnd() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function polygonStart() {\n    lengthRing = true;\n  },\n  polygonEnd: function polygonEnd() {\n    lengthRing = null;\n  },\n  result: function result() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;","export default function PathString() {\n  this._string = [];\n}\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function pointRadius(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function polygonStart() {\n    this._line = 0;\n  },\n  polygonEnd: function polygonEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._string.push(\"M\", x, \",\", y);\n\n          this._point = 1;\n          break;\n        }\n\n      case 1:\n        {\n          this._string.push(\"L\", x, \",\", y);\n\n          break;\n        }\n\n      default:\n        {\n          if (this._circle == null) this._circle = circle(this._radius);\n\n          this._string.push(\"M\", x, \",\", y, this._circle);\n\n          break;\n        }\n    }\n  },\n  result: function result() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n}","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\nexport default function (projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n\n    return contextStream.result();\n  }\n\n  path.area = function (object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function (object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function (object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function (object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function (_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function (_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function (_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}","export default function (methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\nexport function transformer(methods) {\n  return function (stream) {\n    var s = new TransformStream();\n\n    for (var key in methods) {\n      s[key] = methods[key];\n    }\n\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function point(x, y) {\n    this.stream.point(x, y);\n  },\n  sphere: function sphere() {\n    this.stream.sphere();\n  },\n  lineStart: function lineStart() {\n    this.stream.lineStart();\n  },\n  lineEnd: function lineEnd() {\n    this.stream.lineEnd();\n  },\n  polygonStart: function polygonStart() {\n    this.stream.polygonStart();\n  },\n  polygonEnd: function polygonEnd() {\n    this.stream.polygonEnd();\n  }\n};","import { default as geoStream } from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function (b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function (b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function (b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}","import { cartesian } from \"../cartesian\";\nimport { abs, asin, atan2, cos, epsilon, radians, sqrt } from \"../math\";\nimport { transformer } from \"../transform\";\nvar maxDepth = 16,\n    // maximum depth of subdivision\ncosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function (project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function point(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n      || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n        // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n\n  return function (stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n    lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        stream.polygonStart();\n        resampleStream.lineStart = ringStart;\n      },\n      polygonEnd: function polygonEnd() {\n        stream.polygonEnd();\n        resampleStream.lineStart = lineStart;\n      }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]),\n          p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport { cos, degrees, radians, sin, sqrt } from \"../math\";\nimport { rotateRadians } from \"../rotation\";\nimport { transformer } from \"../transform\";\nimport { fitExtent, fitSize, fitWidth, fitHeight } from \"./fit\";\nimport resample from \"./resample\";\nvar transformRadians = transformer({\n  point: function point(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function point(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n\n  transform.invert = function (x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n\n  transform.invert = function (x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150,\n      // scale\n  x = 480,\n      y = 250,\n      // translate\n  lambda = 0,\n      phi = 0,\n      // center\n  deltaLambda = 0,\n      deltaPhi = 0,\n      deltaGamma = 0,\n      rotate,\n      // pre-rotate\n  alpha = 0,\n      // post-rotate\n  theta = null,\n      preclip = clipAntimeridian,\n      // pre-clip angle\n  x0 = null,\n      y0,\n      x1,\n      y1,\n      postclip = identity,\n      // post-clip extent\n  delta2 = 0.5,\n      // precision\n  projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function (_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function (_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function (_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function (extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function (size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function (width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function (height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}","import { asin, atan2, cos, sin, sqrt } from \"../math\";\nexport function azimuthalRaw(scale) {\n  return function (x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [k * cy * sin(x), k * sin(y)];\n  };\n}\nexport function azimuthalInvert(angle) {\n  return function (x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [atan2(x * sc, z * cc), asin(z && y * sc / z)];\n  };\n}","import { asin, sqrt } from \"../math\";\nimport { azimuthalRaw, azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {\n  return 2 * asin(z / 2);\n});\nexport default function () {\n  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);\n}","import { acos, sin } from \"../math\";\nimport { azimuthalRaw, azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport var azimuthalEquidistantRaw = azimuthalRaw(function (c) {\n  return (c = acos(c)) && c / sin(c);\n});\nazimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {\n  return z;\n});\nexport default function () {\n  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);\n}","import { atan, exp, halfPi, log, pi, tan, tau } from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function (x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function () {\n  return mercatorProjection(mercatorRaw).scale(961 / tau);\n}\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null,\n      y0,\n      x1,\n      y1; // clip extent\n\n  m.scale = function (_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function (_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function (_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function (_) {\n    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}","import projection from \"./index\";\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\nequirectangularRaw.invert = equirectangularRaw;\nexport default function () {\n  return projection(equirectangularRaw).scale(152.63);\n}","import { abs, atan2, cos, epsilon, sign, sin, sqrt } from \"../math\";\nimport { conicProjection } from \"./conic\";\nimport { equirectangularRaw } from \"./equirectangular\";\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y,\n        nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function (x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\nexport default function () {\n  return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);\n}","import projection from \"./index.js\";\nimport { abs, asin, cos, epsilon2, sin, sqrt } from \"../math.js\";\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)),\n      l2 = l * l,\n      l6 = l2 * l2 * l2;\n  return [lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];\n}\n\nequalEarthRaw.invert = function (x, y) {\n  var l = y,\n      l2 = l * l,\n      l6 = l2 * l2 * l2;\n\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n\n  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l), asin(sin(l) / M)];\n};\n\nexport default function () {\n  return projection(equalEarthRaw).scale(177.158);\n}","import { atan, cos, sin } from \"../math\";\nimport { azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y),\n      k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\ngnomonicRaw.invert = azimuthalInvert(atan);\nexport default function () {\n  return projection(gnomonicRaw).scale(144.049).clipAngle(60);\n}","import projection from \"./index\";\nimport { abs, epsilon } from \"../math\";\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi,\n      phi4 = phi2 * phi2;\n  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];\n}\n\nnaturalEarth1Raw.invert = function (x, y) {\n  var phi = y,\n      i = 25,\n      delta;\n\n  do {\n    var phi2 = phi * phi,\n        phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];\n};\n\nexport default function () {\n  return projection(naturalEarth1Raw).scale(175.295);\n}","import { asin, cos, epsilon, sin } from \"../math\";\nimport { azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\northographicRaw.invert = azimuthalInvert(asin);\nexport default function () {\n  return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon);\n}","import { atan, cos, sin } from \"../math\";\nimport { azimuthalInvert } from \"./azimuthal\";\nimport projection from \"./index\";\nexport function stereographicRaw(x, y) {\n  var cy = cos(y),\n      k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\nstereographicRaw.invert = azimuthalInvert(function (z) {\n  return 2 * atan(z);\n});\nexport default function () {\n  return projection(stereographicRaw).scale(250).clipAngle(142);\n}","import { atan, exp, halfPi, log, tan } from \"../math\";\nimport { mercatorProjection } from \"./mercator\";\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function (x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function () {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function (_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function (_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90]).scale(159.155);\n}","export { default as geoArea } from \"./area\";\nexport { default as geoBounds } from \"./bounds\";\nexport { default as geoCentroid } from \"./centroid\";\nexport { default as geoCircle } from \"./circle\";\nexport { default as geoClipAntimeridian } from \"./clip/antimeridian\";\nexport { default as geoClipCircle } from \"./clip/circle\";\nexport { default as geoClipExtent } from \"./clip/extent\"; // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\n\nexport { default as geoClipRectangle } from \"./clip/rectangle\";\nexport { default as geoContains } from \"./contains\";\nexport { default as geoDistance } from \"./distance\";\nexport { default as geoGraticule, graticule10 as geoGraticule10 } from \"./graticule\";\nexport { default as geoInterpolate } from \"./interpolate\";\nexport { default as geoLength } from \"./length\";\nexport { default as geoPath } from \"./path/index\";\nexport { default as geoAlbers } from \"./projection/albers\";\nexport { default as geoAlbersUsa } from \"./projection/albersUsa\";\nexport { default as geoAzimuthalEqualArea, azimuthalEqualAreaRaw as geoAzimuthalEqualAreaRaw } from \"./projection/azimuthalEqualArea\";\nexport { default as geoAzimuthalEquidistant, azimuthalEquidistantRaw as geoAzimuthalEquidistantRaw } from \"./projection/azimuthalEquidistant\";\nexport { default as geoConicConformal, conicConformalRaw as geoConicConformalRaw } from \"./projection/conicConformal\";\nexport { default as geoConicEqualArea, conicEqualAreaRaw as geoConicEqualAreaRaw } from \"./projection/conicEqualArea\";\nexport { default as geoConicEquidistant, conicEquidistantRaw as geoConicEquidistantRaw } from \"./projection/conicEquidistant\";\nexport { default as geoEqualEarth, equalEarthRaw as geoEqualEarthRaw } from \"./projection/equalEarth\";\nexport { default as geoEquirectangular, equirectangularRaw as geoEquirectangularRaw } from \"./projection/equirectangular\";\nexport { default as geoGnomonic, gnomonicRaw as geoGnomonicRaw } from \"./projection/gnomonic\";\nexport { default as geoIdentity } from \"./projection/identity\";\nexport { default as geoProjection, projectionMutator as geoProjectionMutator } from \"./projection/index\";\nexport { default as geoMercator, mercatorRaw as geoMercatorRaw } from \"./projection/mercator\";\nexport { default as geoNaturalEarth1, naturalEarth1Raw as geoNaturalEarth1Raw } from \"./projection/naturalEarth1\";\nexport { default as geoOrthographic, orthographicRaw as geoOrthographicRaw } from \"./projection/orthographic\";\nexport { default as geoStereographic, stereographicRaw as geoStereographicRaw } from \"./projection/stereographic\";\nexport { default as geoTransverseMercator, transverseMercatorRaw as geoTransverseMercatorRaw } from \"./projection/transverseMercator\";\nexport { default as geoRotation } from \"./rotation\";\nexport { default as geoStream } from \"./stream\";\nexport { default as geoTransform } from \"./transform\";","export default function (x) {\n  return x;\n}","import identity from \"./identity\";\nexport default function (transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function (input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2,\n        n = input.length,\n        output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n\n    while (j < n) {\n      output[j] = input[j], ++j;\n    }\n\n    return output;\n  };\n}","export default function (array, n) {\n  var t,\n      j = array.length,\n      i = j - n;\n\n  while (i < --j) {\n    t = array[i], array[i++] = array[j], array[j] = t;\n  }\n}","import reverse from \"./reverse\";\nimport transform from \"./transform\";\nexport default function (topology, o) {\n  return o.type === \"GeometryCollection\" ? {\n    type: \"FeatureCollection\",\n    features: o.geometries.map(function (o) {\n      return feature(topology, o);\n    })\n  } : feature(topology, o);\n}\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {\n    type: \"Feature\",\n    properties: properties,\n    geometry: geometry\n  } : bbox == null ? {\n    type: \"Feature\",\n    id: id,\n    properties: properties,\n    geometry: geometry\n  } : {\n    type: \"Feature\",\n    id: id,\n    bbox: bbox,\n    properties: properties,\n    geometry: geometry\n  };\n}\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n\n    for (var i = 0, n = arcs.length; i < n; ++i) {\n      arc(arcs[i], points);\n    }\n\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n\n    while (points.length < 4) {\n      points.push(points[0]);\n    } // This may happen if an arc has only two points.\n\n\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type,\n        coordinates;\n\n    switch (type) {\n      case \"GeometryCollection\":\n        return {\n          type: type,\n          geometries: o.geometries.map(geometry)\n        };\n\n      case \"Point\":\n        coordinates = point(o.coordinates);\n        break;\n\n      case \"MultiPoint\":\n        coordinates = o.coordinates.map(point);\n        break;\n\n      case \"LineString\":\n        coordinates = line(o.arcs);\n        break;\n\n      case \"MultiLineString\":\n        coordinates = o.arcs.map(line);\n        break;\n\n      case \"Polygon\":\n        coordinates = polygon(o.arcs);\n        break;\n\n      case \"MultiPolygon\":\n        coordinates = o.arcs.map(polygon);\n        break;\n\n      default:\n        return null;\n    }\n\n    return {\n      type: type,\n      coordinates: coordinates\n    };\n  }\n\n  return geometry(o);\n}","export { default as bbox } from \"./src/bbox\";\nexport { default as feature } from \"./src/feature\";\nexport { default as mesh, meshArcs } from \"./src/mesh\";\nexport { default as merge, mergeArcs } from \"./src/merge\";\nexport { default as neighbors } from \"./src/neighbors\";\nexport { default as quantize } from \"./src/quantize\";\nexport { default as transform } from \"./src/transform\";\nexport { default as untransform } from \"./src/untransform\";"],"sourceRoot":""}