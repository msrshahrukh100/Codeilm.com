{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"rust\", {\n    start: [// string and byte string\n    {\n      regex: /b?\"/,\n      token: \"string\",\n      next: \"string\"\n    }, // raw string and raw byte string\n    {\n      regex: /b?r\"/,\n      token: \"string\",\n      next: \"string_raw\"\n    }, {\n      regex: /b?r#+\"/,\n      token: \"string\",\n      next: \"string_raw_hash\"\n    }, // character\n    {\n      regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/,\n      token: \"string-2\"\n    }, // byte\n    {\n      regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/,\n      token: \"string-2\"\n    }, {\n      regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n      token: \"number\"\n    }, {\n      regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n      token: [\"keyword\", null, \"def\"]\n    }, {\n      regex: /(?:abstract|alignof|as|box|break|continue|const|crate|do|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n      token: \"keyword\"\n    }, {\n      regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/,\n      token: \"atom\"\n    }, {\n      regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/,\n      token: \"builtin\"\n    }, {\n      regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n      token: [\"keyword\", null, \"def\"]\n    }, {\n      regex: /#!?\\[.*\\]/,\n      token: \"meta\"\n    }, {\n      regex: /\\/\\/.*/,\n      token: \"comment\"\n    }, {\n      regex: /\\/\\*/,\n      token: \"comment\",\n      next: \"comment\"\n    }, {\n      regex: /[-+\\/*=<>!]+/,\n      token: \"operator\"\n    }, {\n      regex: /[a-zA-Z_]\\w*!/,\n      token: \"variable-3\"\n    }, {\n      regex: /[a-zA-Z_]\\w*/,\n      token: \"variable\"\n    }, {\n      regex: /[\\{\\[\\(]/,\n      indent: true\n    }, {\n      regex: /[\\}\\]\\)]/,\n      dedent: true\n    }],\n    string: [{\n      regex: /\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/,\n      token: \"string\"\n    }],\n    string_raw: [{\n      regex: /\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /[^\"]*/,\n      token: \"string\"\n    }],\n    string_raw_hash: [{\n      regex: /\"#+/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /(?:[^\"]|\"(?!#))*/,\n      token: \"string\"\n    }],\n    comment: [{\n      regex: /.*?\\*\\//,\n      token: \"comment\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"comment\"\n    }],\n    meta: {\n      dontIndentStates: [\"comment\"],\n      electricInput: /^\\s*\\}$/,\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\n  CodeMirror.defineMIME(\"text/rust\", \"rust\");\n});","map":null,"metadata":{},"sourceType":"script"}