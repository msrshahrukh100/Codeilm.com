{"ast":null,"code":"var _jsxFileName = \"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/src/components/TutorialPage/TutorialPage.js\";\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Embed from '../CarbonCode/embed';\nimport YouTube from 'react-youtube';\nimport './tutorialPage.css';\nvar renderers = {\n  code: function code(props) {\n    return React.createElement(Embed, {\n      code: props.value,\n      language: props.language,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    });\n  },\n  paragraph: function paragraph(props) {\n    return React.createElement(\"p\", Object.assign({\n      className: \"paddedText\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }));\n  },\n  list: function list(props) {\n    if (props.ordered) {\n      return React.createElement(\"ol\", Object.assign({\n        className: \"paddedText\"\n      }, props, {\n        ordered: \"true\",\n        tight: \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"ul\", Object.assign({\n        className: \"paddedText\"\n      }, props, {\n        tight: \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }));\n    }\n  },\n  image: function image(props) {\n    return React.createElement(\"img\", Object.assign({}, props, {\n      style: {\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        display: 'block',\n        width: '80%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  },\n  link: function link(props) {\n    if (props.children[0].props.value === \"YOUTUBE\") {\n      var opts = {\n        playerVars: {\n          // https://developers.google.com/youtube/player_parameters\n          rel: 0,\n          iv_load_policy: 3,\n          loop: 1\n        }\n      };\n      return React.createElement(\"div\", {\n        className: \"videoWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(YouTube, {\n        videoId: props.href,\n        opts: opts,\n        className: \"something\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"a\", Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n};\n\nvar tutorialPage = function tutorialPage(props) {\n  var title = props.page ? props.page.title : null;\n  var content = props.page ? React.createElement(ReactMarkdown, {\n    source: props.page.content,\n    renderers: renderers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }) : null;\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, title), content ? content : props.lastPage);\n};\n\nexport default tutorialPage;","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/src/components/TutorialPage/TutorialPage.js"],"names":["React","ReactMarkdown","Embed","YouTube","renderers","code","props","value","language","paragraph","list","ordered","image","marginLeft","marginRight","display","width","link","children","opts","playerVars","rel","iv_load_policy","loop","href","tutorialPage","title","page","content","lastPage"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport Embed from '../CarbonCode/embed'\nimport YouTube from 'react-youtube';\nimport './tutorialPage.css'\n\nconst renderers: ReactMarkdown.Renderers = {\n    code: (props: string) => {\n      return (\n        <Embed code={props.value} language={props.language} />\n      )\n    },\n    paragraph: (props) => {\n      return <p className=\"paddedText\" {...props}/>\n    },\n    list: (props) => {\n      if(props.ordered) {\n\n        return <ol className=\"paddedText\" {...props} ordered=\"true\" tight=\"true\" />\n      }\n      else {\n        return <ul className=\"paddedText\" {...props} tight=\"true\" />\n      }\n    },\n    image: props => {\n      return <img {...props} style={{marginLeft: 'auto', marginRight: 'auto', display: 'block', width: '80%'}} />\n    },\n    link: (props) => {\n      if(props.children[0].props.value === \"YOUTUBE\") {\n        const opts = {\n          playerVars: { // https://developers.google.com/youtube/player_parameters\n            rel: 0,\n            iv_load_policy: 3,\n            loop: 1\n          }\n        };\n\n        return (\n          <div className=\"videoWrapper\">\n            <YouTube\n              videoId={props.href}\n              opts={opts}\n              className={\"something\"}\n            />\n          </div>\n        )\n      }\n      return (\n        <a {...props} />\n      )\n    }\n};\n\nconst tutorialPage = (props) => {\n  const title = props.page ? props.page.title : null\n  const content = props.page ? <ReactMarkdown\n    source={props.page.content}\n    renderers={renderers} /> : null\n\n\n  return (\n    <>\n      <h2>{title}</h2>\n      {content ? content : props.lastPage}\n    </>\n  )\n}\n\nexport default tutorialPage\n"]},"metadata":{},"sourceType":"module"}