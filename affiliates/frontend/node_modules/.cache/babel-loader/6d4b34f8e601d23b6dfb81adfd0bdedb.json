{"ast":null,"code":"var CodeMirror = require('codemirror');\n\nCodeMirror.defineMode('nimrod', function (conf, parserConf) {\n  var ERRORCLASS = 'error';\n\n  function wordRegexp(words) {\n    return new RegExp('^((' + words.join(')|(') + '))\\\\b');\n  }\n\n  var ops = ['=', '+', '-', '*', '/', '<', '>', '@', '$', '~', '&', '%', '|', '?', '^', ':', '\\\\', '[', ']', '(', ')', ',', '{', '}', '.\\\\.', '.'];\n  var operators = new RegExp(ops.map(function (op) {\n    return '\\\\' + op;\n  }).join('|'));\n  var identifiers = new RegExp('^[_A-Za-z][_A-Za-z0-9]*');\n  var commonkeywords = ['addr', 'asm', 'atomic', 'bind', 'block', 'break', 'case', 'cast', 'const', 'continue', 'converter', 'discard', 'distinct', 'do', 'elif', 'else', 'end', 'enum', 'except', 'export', 'finally', 'for', 'from', 'generic', 'if', 'import', 'include', 'interface', 'iterator', 'lambda', 'let', 'macro', 'method', 'mixin', 'nil', 'object', 'out', 'proc', 'ptr', 'raise', 'ref', 'return', 'shared', 'static', 'template', 'try', 'tuple', 'type', 'using', 'var', 'when', 'while', 'with', 'without', 'yield', // keyword operators\n  'shl', 'shr', 'and', 'or', 'xor', 'not', 'div', 'mod', 'is', 'isnot', 'in', 'as', 'of'];\n  var commonBuiltins = ['int', 'int8', 'int16', 'int32', 'int64', 'uint', 'uint8', 'uint16', 'uint32', 'uint64', 'float', 'float32', 'float64', 'bool', 'char', 'string', 'cstring', 'pointer', 'range', 'array', 'openarray', 'seq', 'set', 'Byte', 'Natural', 'Positive', 'TObject', 'PObject', 'Conversion', 'TResult', 'TAddress', 'BiggestInt', 'BiggestFloat', 'cchar', 'cschar', 'cshort', 'cint', 'csize', 'cuchar', 'cushort', 'clong', 'clonglong', 'cfloat', 'cdouble', 'clongdouble', 'cuint', 'culong', 'culonglong', 'cchar', 'cstringArray', 'TEndian', 'PFloat32', 'PFloat64', 'PInt64', 'PInt32', 'TGC_Strategy', 'TFile', 'TFileMode', 'TFileHandle', 'isMainModule', 'CompileDate', 'CompileTime', 'NimrodVersion', 'NimrodMajor', 'NimrodMinor', 'NimrodPatch', 'cpuEndian', 'hostOS', 'hostCPU', 'inf', 'neginf', 'nan', 'QuitSuccess', 'QuitFailure', 'dbgLineHook', 'stdin', 'stdout', 'stderr', 'defined', 'new', 'high', 'low', 'sizeof', 'succ', 'pred', 'inc', 'dec', 'newSeq', 'len', 'incl', 'excl', 'card', 'ord', 'chr', 'ze', 'ze64', 'toU8', 'toU16', 'toU32', 'abs', 'min', 'max', 'add', 'repr', 'contains', 'toFloat', 'toBiggestFloat', 'toInt', 'toBiggestInt', 'addQuitProc', 'copy', 'setLen', 'newString', 'zeroMem', 'copyMem', 'moveMem', 'equalMem', 'alloc', 'alloc0', 'realloc', 'dealloc', 'setLen', 'assert', 'swap', 'getRefcount', 'getCurrentException', 'Msg', 'getOccupiedMem', 'getFreeMem', 'getTotalMem', 'isNil', 'seqToPtr', 'find', 'pop', 'GC_disable', 'GC_enable', 'GC_fullCollect', 'GC_setStrategy', 'GC_enableMarkAnd', 'Sweep', 'GC_disableMarkAnd', 'Sweep', 'GC_getStatistics', 'GC_ref', 'GC_ref', 'GC_ref', 'GC_unref', 'GC_unref', 'GC_unref', 'quit', 'OpenFile', 'OpenFile', 'CloseFile', 'EndOfFile', 'readChar', 'FlushFile', 'readFile', 'write', 'readLine', 'writeln', 'writeln', 'getFileSize', 'ReadBytes', 'ReadChars', 'readBuffer', 'writeBytes', 'writeChars', 'writeBuffer', 'setFilePos', 'getFilePos', 'fileHandle', 'countdown', 'countup', 'items', 'lines', 'true', 'false', // exceptions\n  'E_Base', 'EAsynch', 'ESynch', 'ESystem', 'EIO', 'EOS', 'ERessourceExhausted', 'EArithmetic', 'EDivByZero', 'EOverflow', 'EAccessViolation', 'EAssertionFailed', 'EControlC', 'EInvalidValue', 'EOutOfMemory', 'EInvalidIndex', 'EInvalidField', 'EOutOfRange', 'EStackOverflow', 'ENoExceptionToReraise', 'EInvalidObjectAssignment', 'EInvalidObject', 'EInvalidLibrary', 'EInvalidKey', 'EInvalidObjectConversion', 'EFloatingPoint', 'EFloatInvalidOp', 'EFloatDivByZero', 'EFloatOverflow', 'EFloatInexact', 'EDeadThrea'];\n  if (parserConf.extra_keywords != undefined) commonkeywords = commonkeywords.concat(parserConf.extra_keywords);\n  if (parserConf.extra_builtins != undefined) commonBuiltins = commonBuiltins.concat(parserConf.extra_builtins);\n  var keywords = wordRegexp(commonkeywords);\n  var builtins = wordRegexp(commonBuiltins);\n  var indentInfo = null;\n  var stringPrefixes = new RegExp('^((\\'{3}|\"{3}|[\\'\"]))', 'i'); // tokenizers\n\n  function tokenBase(stream, state) {\n    // Handle scope changes\n    if (stream.sol()) {\n      var scopeOffset = state.scopes[0].offset;\n\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n\n        if (lineOffset > scopeOffset) {\n          indentInfo = 'indent';\n        } else if (lineOffset < scopeOffset) {\n          indentInfo = 'dedent';\n        }\n\n        return null;\n      } else {\n        if (scopeOffset > 0) {\n          dedent(stream, state);\n        }\n      }\n    }\n\n    if (stream.eatSpace()) return null;\n    var ch = stream.peek(); // Handle Comments\n\n    if (ch === '#') {\n      stream.skipToEnd();\n      return 'comment';\n    } // Handle Number Literals\n\n\n    if (stream.match(/^[0-9.]/, false)) {\n      var floatLiteral = false; // Floats\n\n      if (stream.match(/^\\d*\\.\\d+(e[+-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n\n      if (stream.match(/^\\d+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n\n      if (stream.match(/^\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return 'number';\n      } // Integers\n\n\n      var intLiteral = false; // Hex\n\n      if (stream.match(/^0x[0-9a-f]+/i)) {\n        intLiteral = true;\n      } // Binary\n\n\n      if (stream.match(/^0b[01]+/i)) {\n        intLiteral = true;\n      } // Octal\n\n\n      if (stream.match(/^0o[0-7]+/i)) {\n        intLiteral = true;\n      } // Decimal\n\n\n      if (stream.match(/^[1-9]\\d*(e[+-]?\\d+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i);\n        intLiteral = true;\n      } // Zero by itself with no other piece of number.\n\n\n      if (stream.match(/^0(?![\\dx])/i)) {\n        intLiteral = true;\n      }\n\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return 'number';\n      }\n    } // Handle Strings\n\n\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenStringFactory(stream.current());\n      return state.tokenize(stream, state);\n    }\n\n    if (stream.match(operators)) return 'operator';\n    if (stream.match(keywords)) return 'keyword';\n    if (stream.match(builtins)) return 'builtin';\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken != null && state.lastToken.match(/proc|iterator|macro|template|class|converter/)) {\n        return 'def';\n      }\n\n      return 'variable';\n    } // Handle non-detected items\n\n\n    stream.next();\n    return ERRORCLASS;\n  }\n\n  function tokenStringFactory(delimiter) {\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = 'string';\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n\n        if (stream.eat('\\\\')) {\n          stream.next();\n\n          if (singleline && stream.eol()) {\n            return OUTCLASS;\n          }\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) {\n          return ERRORCLASS;\n        } else {\n          state.tokenize = tokenBase;\n        }\n      }\n\n      return OUTCLASS;\n    }\n\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function indent(stream, state, type) {\n    type = type || 'nim';\n    var indentUnit = 0;\n\n    if (type === 'nim') {\n      if (state.scopes[0].type !== 'nim') {\n        state.scopes[0].offset = stream.indentation();\n        return;\n      }\n\n      for (var i = 0; i < state.scopes.length; ++i) {\n        if (state.scopes[i].type === 'nim') {\n          indentUnit = state.scopes[i].offset + conf.indentUnit;\n          break;\n        }\n      }\n    } else {\n      indentUnit = stream.column() + stream.current().length;\n    }\n\n    state.scopes.unshift({\n      offset: indentUnit,\n      type: type\n    });\n  }\n\n  function dedent(stream, state, type) {\n    type = type || 'nim';\n    if (state.scopes.length == 1) return;\n\n    if (state.scopes[0].type === 'nim') {\n      var _indent = stream.indentation();\n\n      var _indent_index = -1;\n\n      for (var i = 0; i < state.scopes.length; ++i) {\n        if (_indent === state.scopes[i].offset) {\n          _indent_index = i;\n          break;\n        }\n      }\n\n      if (_indent_index === -1) {\n        return true;\n      }\n\n      while (state.scopes[0].offset !== _indent) {\n        state.scopes.shift();\n      }\n\n      return false;\n    } else {\n      if (type === 'nim') {\n        state.scopes[0].offset = stream.indentation();\n        return false;\n      } else {\n        if (state.scopes[0].type != type) {\n          return true;\n        }\n\n        state.scopes.shift();\n        return false;\n      }\n    }\n  }\n\n  function tokenLexer(stream, state) {\n    indentInfo = null;\n    var style = state.tokenize(stream, state);\n    var current = stream.current(); // Handle '.' connected identifiers\n\n    if (current === '.') {\n      style = stream.match(identifiers, false) ? null : ERRORCLASS;\n\n      if (style === null && state.lastStyle === 'meta') {\n        // Apply 'meta' style to '.' connected identifiers when\n        // appropriate.\n        style = 'meta';\n      }\n\n      return style;\n    }\n\n    if ((style === 'variable' || style === 'builtin') && state.lastStyle === 'meta') {\n      style = 'meta';\n    } // Handle scope changes.\n\n\n    if (current.match(/return|break|continue|raise/) || current === 'discard' && stream.eol()) state.dedent += 1;\n    if (current === 'lambda' || current === 'proc') state.lambda = true;\n    var delimiter_index = '[({'.indexOf(current);\n\n    if (delimiter_index !== -1) {\n      indent(stream, state, '])}'.slice(delimiter_index, delimiter_index + 1));\n    } else if (stream.eol() && current.match(/=|:|import|include|type|const|var|let/)) {\n      indent(stream, state);\n    }\n\n    if (indentInfo === 'dedent') {\n      if (dedent(stream, state)) {\n        return ERRORCLASS;\n      }\n    }\n\n    delimiter_index = '])}'.indexOf(current);\n\n    if (delimiter_index !== -1) {\n      if (dedent(stream, state, current)) {\n        return ERRORCLASS;\n      }\n    }\n\n    if (state.dedent > 0 && stream.eol() && state.scopes[0].type == 'nim') {\n      if (state.scopes.length > 1) state.scopes.shift();\n      state.dedent -= 1;\n    }\n\n    return style;\n  }\n\n  var external = {\n    startState: function startState(basecolumn) {\n      return {\n        tokenize: tokenBase,\n        scopes: [{\n          offset: basecolumn || 0,\n          type: 'nim'\n        }],\n        lastStyle: null,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n    token: function token(stream, state) {\n      var style = tokenLexer(stream, state);\n      state.lastStyle = style;\n      var current = stream.current();\n      if (current && style) state.lastToken = current;\n      if (stream.eol() && state.lambda) state.lambda = false;\n      return style;\n    },\n    indent: function indent(state) {\n      if (state.tokenize != tokenBase) return state.tokenize.isString ? CodeMirror.Pass : 0;\n      return state.scopes[0].offset;\n    },\n    lineComment: '#',\n    fold: 'indent'\n  };\n  return external;\n});\nCodeMirror.defineMIME('text/x-nimrod', 'nimrod');","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/src/components/CarbonCode/lib/custom/modes/nimrod.js"],"names":["CodeMirror","require","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","ops","operators","map","op","identifiers","commonkeywords","commonBuiltins","extra_keywords","undefined","concat","extra_builtins","keywords","builtins","indentInfo","stringPrefixes","tokenBase","stream","state","sol","scopeOffset","scopes","offset","eatSpace","lineOffset","indentation","dedent","ch","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","tokenStringFactory","current","lastToken","next","delimiter","singleline","length","OUTCLASS","tokenString","eol","eatWhile","singleLineStringErrors","isString","indent","type","indentUnit","i","column","unshift","_indent","_indent_index","shift","tokenLexer","style","lastStyle","lambda","delimiter_index","indexOf","slice","external","startState","basecolumn","token","Pass","lineComment","fold","defineMIME"],"mappings":"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","sourcesContent":["const CodeMirror = require('codemirror')\n\nCodeMirror.defineMode('nimrod', function(conf, parserConf) {\n  var ERRORCLASS = 'error'\n\n  function wordRegexp(words) {\n    return new RegExp('^((' + words.join(')|(') + '))\\\\b')\n  }\n\n  var ops = [\n    '=',\n    '+',\n    '-',\n    '*',\n    '/',\n    '<',\n    '>',\n    '@',\n    '$',\n    '~',\n    '&',\n    '%',\n    '|',\n    '?',\n    '^',\n    ':',\n    '\\\\',\n    '[',\n    ']',\n    '(',\n    ')',\n    ',',\n    '{',\n    '}',\n    '.\\\\.',\n    '.'\n  ]\n  var operators = new RegExp(\n    ops\n      .map(function(op) {\n        return '\\\\' + op\n      })\n      .join('|')\n  )\n  var identifiers = new RegExp('^[_A-Za-z][_A-Za-z0-9]*')\n\n  var commonkeywords = [\n    'addr',\n    'asm',\n    'atomic',\n    'bind',\n    'block',\n    'break',\n    'case',\n    'cast',\n    'const',\n    'continue',\n    'converter',\n    'discard',\n    'distinct',\n    'do',\n    'elif',\n    'else',\n    'end',\n    'enum',\n    'except',\n    'export',\n    'finally',\n    'for',\n    'from',\n    'generic',\n    'if',\n    'import',\n    'include',\n    'interface',\n    'iterator',\n    'lambda',\n    'let',\n    'macro',\n    'method',\n    'mixin',\n    'nil',\n    'object',\n    'out',\n    'proc',\n    'ptr',\n    'raise',\n    'ref',\n    'return',\n    'shared',\n    'static',\n    'template',\n    'try',\n    'tuple',\n    'type',\n    'using',\n    'var',\n    'when',\n    'while',\n    'with',\n    'without',\n    'yield',\n\n    // keyword operators\n    'shl',\n    'shr',\n    'and',\n    'or',\n    'xor',\n    'not',\n    'div',\n    'mod',\n    'is',\n    'isnot',\n    'in',\n    'as',\n    'of'\n  ]\n\n  var commonBuiltins = [\n    'int',\n    'int8',\n    'int16',\n    'int32',\n    'int64',\n    'uint',\n    'uint8',\n    'uint16',\n    'uint32',\n    'uint64',\n    'float',\n    'float32',\n    'float64',\n    'bool',\n    'char',\n    'string',\n    'cstring',\n    'pointer',\n    'range',\n    'array',\n    'openarray',\n    'seq',\n    'set',\n    'Byte',\n    'Natural',\n    'Positive',\n    'TObject',\n    'PObject',\n    'Conversion',\n    'TResult',\n    'TAddress',\n    'BiggestInt',\n    'BiggestFloat',\n    'cchar',\n    'cschar',\n    'cshort',\n    'cint',\n    'csize',\n    'cuchar',\n    'cushort',\n    'clong',\n    'clonglong',\n    'cfloat',\n    'cdouble',\n    'clongdouble',\n    'cuint',\n    'culong',\n    'culonglong',\n    'cchar',\n    'cstringArray',\n    'TEndian',\n    'PFloat32',\n    'PFloat64',\n    'PInt64',\n    'PInt32',\n    'TGC_Strategy',\n    'TFile',\n    'TFileMode',\n    'TFileHandle',\n    'isMainModule',\n    'CompileDate',\n    'CompileTime',\n    'NimrodVersion',\n    'NimrodMajor',\n    'NimrodMinor',\n    'NimrodPatch',\n    'cpuEndian',\n    'hostOS',\n    'hostCPU',\n    'inf',\n    'neginf',\n    'nan',\n    'QuitSuccess',\n    'QuitFailure',\n    'dbgLineHook',\n    'stdin',\n    'stdout',\n    'stderr',\n    'defined',\n    'new',\n    'high',\n    'low',\n    'sizeof',\n    'succ',\n    'pred',\n    'inc',\n    'dec',\n    'newSeq',\n    'len',\n    'incl',\n    'excl',\n    'card',\n    'ord',\n    'chr',\n    'ze',\n    'ze64',\n    'toU8',\n    'toU16',\n    'toU32',\n    'abs',\n    'min',\n    'max',\n    'add',\n    'repr',\n    'contains',\n    'toFloat',\n    'toBiggestFloat',\n    'toInt',\n    'toBiggestInt',\n    'addQuitProc',\n    'copy',\n    'setLen',\n    'newString',\n    'zeroMem',\n    'copyMem',\n    'moveMem',\n    'equalMem',\n    'alloc',\n    'alloc0',\n    'realloc',\n    'dealloc',\n    'setLen',\n    'assert',\n    'swap',\n    'getRefcount',\n    'getCurrentException',\n    'Msg',\n    'getOccupiedMem',\n    'getFreeMem',\n    'getTotalMem',\n    'isNil',\n    'seqToPtr',\n    'find',\n    'pop',\n    'GC_disable',\n    'GC_enable',\n    'GC_fullCollect',\n    'GC_setStrategy',\n    'GC_enableMarkAnd',\n    'Sweep',\n    'GC_disableMarkAnd',\n    'Sweep',\n    'GC_getStatistics',\n    'GC_ref',\n    'GC_ref',\n    'GC_ref',\n    'GC_unref',\n    'GC_unref',\n    'GC_unref',\n    'quit',\n    'OpenFile',\n    'OpenFile',\n    'CloseFile',\n    'EndOfFile',\n    'readChar',\n    'FlushFile',\n    'readFile',\n    'write',\n    'readLine',\n    'writeln',\n    'writeln',\n    'getFileSize',\n    'ReadBytes',\n    'ReadChars',\n    'readBuffer',\n    'writeBytes',\n    'writeChars',\n    'writeBuffer',\n    'setFilePos',\n    'getFilePos',\n    'fileHandle',\n    'countdown',\n    'countup',\n    'items',\n    'lines',\n    'true',\n    'false',\n\n    // exceptions\n    'E_Base',\n    'EAsynch',\n    'ESynch',\n    'ESystem',\n    'EIO',\n    'EOS',\n    'ERessourceExhausted',\n    'EArithmetic',\n    'EDivByZero',\n    'EOverflow',\n    'EAccessViolation',\n    'EAssertionFailed',\n    'EControlC',\n    'EInvalidValue',\n    'EOutOfMemory',\n    'EInvalidIndex',\n    'EInvalidField',\n    'EOutOfRange',\n    'EStackOverflow',\n    'ENoExceptionToReraise',\n    'EInvalidObjectAssignment',\n    'EInvalidObject',\n    'EInvalidLibrary',\n    'EInvalidKey',\n    'EInvalidObjectConversion',\n    'EFloatingPoint',\n    'EFloatInvalidOp',\n    'EFloatDivByZero',\n    'EFloatOverflow',\n    'EFloatInexact',\n    'EDeadThrea'\n  ]\n\n  if (parserConf.extra_keywords != undefined)\n    commonkeywords = commonkeywords.concat(parserConf.extra_keywords)\n\n  if (parserConf.extra_builtins != undefined)\n    commonBuiltins = commonBuiltins.concat(parserConf.extra_builtins)\n\n  var keywords = wordRegexp(commonkeywords)\n  var builtins = wordRegexp(commonBuiltins)\n\n  var indentInfo = null\n\n  var stringPrefixes = new RegExp('^((\\'{3}|\"{3}|[\\'\"]))', 'i')\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    // Handle scope changes\n    if (stream.sol()) {\n      var scopeOffset = state.scopes[0].offset\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation()\n        if (lineOffset > scopeOffset) {\n          indentInfo = 'indent'\n        } else if (lineOffset < scopeOffset) {\n          indentInfo = 'dedent'\n        }\n        return null\n      } else {\n        if (scopeOffset > 0) {\n          dedent(stream, state)\n        }\n      }\n    }\n\n    if (stream.eatSpace()) return null\n\n    var ch = stream.peek()\n\n    // Handle Comments\n    if (ch === '#') {\n      stream.skipToEnd()\n      return 'comment'\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9.]/, false)) {\n      var floatLiteral = false\n      // Floats\n      if (stream.match(/^\\d*\\.\\d+(e[+-]?\\d+)?/i)) {\n        floatLiteral = true\n      }\n      if (stream.match(/^\\d+\\.\\d*/)) {\n        floatLiteral = true\n      }\n      if (stream.match(/^\\.\\d+/)) {\n        floatLiteral = true\n      }\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i)\n        return 'number'\n      }\n      // Integers\n      var intLiteral = false\n      // Hex\n      if (stream.match(/^0x[0-9a-f]+/i)) {\n        intLiteral = true\n      }\n      // Binary\n      if (stream.match(/^0b[01]+/i)) {\n        intLiteral = true\n      }\n      // Octal\n      if (stream.match(/^0o[0-7]+/i)) {\n        intLiteral = true\n      }\n      // Decimal\n      if (stream.match(/^[1-9]\\d*(e[+-]?\\d+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i)\n        intLiteral = true\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) {\n        intLiteral = true\n      }\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i)\n        return 'number'\n      }\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenStringFactory(stream.current())\n      return state.tokenize(stream, state)\n    }\n\n    if (stream.match(operators)) return 'operator'\n\n    if (stream.match(keywords)) return 'keyword'\n\n    if (stream.match(builtins)) return 'builtin'\n\n    if (stream.match(identifiers)) {\n      if (\n        state.lastToken != null &&\n        state.lastToken.match(/proc|iterator|macro|template|class|converter/)\n      ) {\n        return 'def'\n      }\n\n      return 'variable'\n    }\n\n    // Handle non-detected items\n    stream.next()\n    return ERRORCLASS\n  }\n\n  function tokenStringFactory(delimiter) {\n    var singleline = delimiter.length == 1\n    var OUTCLASS = 'string'\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/)\n        if (stream.eat('\\\\')) {\n          stream.next()\n          if (singleline && stream.eol()) {\n            return OUTCLASS\n          }\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase\n          return OUTCLASS\n        } else {\n          stream.eat(/['\"]/)\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) {\n          return ERRORCLASS\n        } else {\n          state.tokenize = tokenBase\n        }\n      }\n      return OUTCLASS\n    }\n\n    tokenString.isString = true\n    return tokenString\n  }\n\n  function indent(stream, state, type) {\n    type = type || 'nim'\n    var indentUnit = 0\n    if (type === 'nim') {\n      if (state.scopes[0].type !== 'nim') {\n        state.scopes[0].offset = stream.indentation()\n        return\n      }\n      for (var i = 0; i < state.scopes.length; ++i) {\n        if (state.scopes[i].type === 'nim') {\n          indentUnit = state.scopes[i].offset + conf.indentUnit\n          break\n        }\n      }\n    } else {\n      indentUnit = stream.column() + stream.current().length\n    }\n\n    state.scopes.unshift({\n      offset: indentUnit,\n      type: type\n    })\n  }\n\n  function dedent(stream, state, type) {\n    type = type || 'nim'\n    if (state.scopes.length == 1) return\n    if (state.scopes[0].type === 'nim') {\n      var _indent = stream.indentation()\n      var _indent_index = -1\n      for (var i = 0; i < state.scopes.length; ++i) {\n        if (_indent === state.scopes[i].offset) {\n          _indent_index = i\n          break\n        }\n      }\n      if (_indent_index === -1) {\n        return true\n      }\n      while (state.scopes[0].offset !== _indent) {\n        state.scopes.shift()\n      }\n      return false\n    } else {\n      if (type === 'nim') {\n        state.scopes[0].offset = stream.indentation()\n        return false\n      } else {\n        if (state.scopes[0].type != type) {\n          return true\n        }\n        state.scopes.shift()\n        return false\n      }\n    }\n  }\n\n  function tokenLexer(stream, state) {\n    indentInfo = null\n    var style = state.tokenize(stream, state)\n    var current = stream.current()\n\n    // Handle '.' connected identifiers\n    if (current === '.') {\n      style = stream.match(identifiers, false) ? null : ERRORCLASS\n      if (style === null && state.lastStyle === 'meta') {\n        // Apply 'meta' style to '.' connected identifiers when\n        // appropriate.\n        style = 'meta'\n      }\n      return style\n    }\n\n    if ((style === 'variable' || style === 'builtin') && state.lastStyle === 'meta') {\n      style = 'meta'\n    }\n\n    // Handle scope changes.\n    if (current.match(/return|break|continue|raise/) || (current === 'discard' && stream.eol()))\n      state.dedent += 1\n\n    if (current === 'lambda' || current === 'proc') state.lambda = true\n\n    var delimiter_index = '[({'.indexOf(current)\n\n    if (delimiter_index !== -1) {\n      indent(stream, state, '])}'.slice(delimiter_index, delimiter_index + 1))\n    } else if (stream.eol() && current.match(/=|:|import|include|type|const|var|let/)) {\n      indent(stream, state)\n    }\n\n    if (indentInfo === 'dedent') {\n      if (dedent(stream, state)) {\n        return ERRORCLASS\n      }\n    }\n\n    delimiter_index = '])}'.indexOf(current)\n    if (delimiter_index !== -1) {\n      if (dedent(stream, state, current)) {\n        return ERRORCLASS\n      }\n    }\n\n    if (state.dedent > 0 && stream.eol() && state.scopes[0].type == 'nim') {\n      if (state.scopes.length > 1) state.scopes.shift()\n      state.dedent -= 1\n    }\n\n    return style\n  }\n\n  var external = {\n    startState: function(basecolumn) {\n      return {\n        tokenize: tokenBase,\n        scopes: [{ offset: basecolumn || 0, type: 'nim' }],\n        lastStyle: null,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      }\n    },\n\n    token: function(stream, state) {\n      var style = tokenLexer(stream, state)\n\n      state.lastStyle = style\n\n      var current = stream.current()\n      if (current && style) state.lastToken = current\n\n      if (stream.eol() && state.lambda) state.lambda = false\n\n      return style\n    },\n\n    indent: function(state) {\n      if (state.tokenize != tokenBase) return state.tokenize.isString ? CodeMirror.Pass : 0\n\n      return state.scopes[0].offset\n    },\n\n    lineComment: '#',\n    fold: 'indent'\n  }\n\n  return external\n})\n\nCodeMirror.defineMIME('text/x-nimrod', 'nimrod')\n"]},"metadata":{},"sourceType":"module"}