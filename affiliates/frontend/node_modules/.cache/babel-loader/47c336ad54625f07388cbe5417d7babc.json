{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) define([\"../../lib/codemirror\"], mod);else mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('troff', function () {\n    var words = {};\n\n    function tokenBase(stream) {\n      if (stream.eatSpace()) return null;\n      var sol = stream.sol();\n      var ch = stream.next();\n\n      if (ch === '\\\\') {\n        if (stream.match('fB') || stream.match('fR') || stream.match('fI') || stream.match('u') || stream.match('d') || stream.match('%') || stream.match('&')) {\n          return 'string';\n        }\n\n        if (stream.match('m[')) {\n          stream.skipTo(']');\n          stream.next();\n          return 'string';\n        }\n\n        if (stream.match('s+') || stream.match('s-')) {\n          stream.eatWhile(/[\\d-]/);\n          return 'string';\n        }\n\n        if (stream.match('\\(') || stream.match('*\\(')) {\n          stream.eatWhile(/[\\w-]/);\n          return 'string';\n        }\n\n        return 'string';\n      }\n\n      if (sol && (ch === '.' || ch === '\\'')) {\n        if (stream.eat('\\\\') && stream.eat('\\\"')) {\n          stream.skipToEnd();\n          return 'comment';\n        }\n      }\n\n      if (sol && ch === '.') {\n        if (stream.match('B ') || stream.match('I ') || stream.match('R ')) {\n          return 'attribute';\n        }\n\n        if (stream.match('TH ') || stream.match('SH ') || stream.match('SS ') || stream.match('HP ')) {\n          stream.skipToEnd();\n          return 'quote';\n        }\n\n        if (stream.match(/[A-Z]/) && stream.match(/[A-Z]/) || stream.match(/[a-z]/) && stream.match(/[a-z]/)) {\n          return 'attribute';\n        }\n      }\n\n      stream.eatWhile(/[\\w-]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : null;\n    }\n\n    function tokenize(stream, state) {\n      return (state.tokens[0] || tokenBase)(stream, state);\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        return {\n          tokens: []\n        };\n      },\n      token: function token(stream, state) {\n        return tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME('text/troff', 'troff');\n  CodeMirror.defineMIME('text/x-troff', 'troff');\n  CodeMirror.defineMIME('application/x-troff', 'troff');\n});","map":null,"metadata":{},"sourceType":"script"}