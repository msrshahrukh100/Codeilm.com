{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Yacas mode copyright (c) 2015 by Grzegorz Mazur\n// Loosely based on mathematica mode by Calin Barbat\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('yacas', function (_config, _parserConfig) {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" + \"FromString Function Integrate InverseTaylor Limit \" + \"LocalSymbols Macro MacroRule MacroRulePattern \" + \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" + \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" + \"ToStdout ToString TraceRule Until While\"); // patterns\n\n    var pFloatForm = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\n    var pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\"; // regular expressions\n\n    var reFloatForm = new RegExp(pFloatForm);\n    var reIdentifier = new RegExp(pIdentifier);\n    var rePattern = new RegExp(pIdentifier + \"?_\" + pIdentifier);\n    var reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\n    function tokenBase(stream, state) {\n      var ch; // get next character\n\n      ch = stream.next(); // string\n\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      } // comment\n\n\n      if (ch === '/') {\n        if (stream.eat('*')) {\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      } // go back one character\n\n\n      stream.backUp(1); // update scope info\n\n      var m = stream.match(/^(\\w+)\\s*\\(/, false);\n      if (m !== null && bodiedOps.hasOwnProperty(m[1])) state.scopes.push('bodied');\n      var scope = currentScope(state);\n      if (scope === 'bodied' && ch === '[') state.scopes.pop();\n      if (ch === '[' || ch === '{' || ch === '(') state.scopes.push(ch);\n      scope = currentScope(state);\n      if (scope === '[' && ch === ']' || scope === '{' && ch === '}' || scope === '(' && ch === ')') state.scopes.pop();\n\n      if (ch === ';') {\n        while (scope === 'bodied') {\n          state.scopes.pop();\n          scope = currentScope(state);\n        }\n      } // look for ordered rules\n\n\n      if (stream.match(/\\d+ *#/, true, false)) {\n        return 'qualifier';\n      } // look for numbers\n\n\n      if (stream.match(reFloatForm, true, false)) {\n        return 'number';\n      } // look for placeholders\n\n\n      if (stream.match(rePattern, true, false)) {\n        return 'variable-3';\n      } // match all braces separately\n\n\n      if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n        return 'bracket';\n      } // literals looking like function calls\n\n\n      if (stream.match(reFunctionLike, true, false)) {\n        stream.backUp(1);\n        return 'variable';\n      } // all other identifiers\n\n\n      if (stream.match(reIdentifier, true, false)) {\n        return 'variable-2';\n      } // operators; note that operators like @@ or /; are matched separately for each symbol.\n\n\n      if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\n        return 'operator';\n      } // everything else is an error\n\n\n      return 'error';\n    }\n\n    function tokenString(stream, state) {\n      var next,\n          end = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next === '\\\\';\n      }\n\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    ;\n\n    function tokenComment(stream, state) {\n      var prev, next;\n\n      while ((next = stream.next()) != null) {\n        if (prev === '*' && next === '/') {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        prev = next;\n      }\n\n      return 'comment';\n    }\n\n    function currentScope(state) {\n      var scope = null;\n      if (state.scopes.length > 0) scope = state.scopes[state.scopes.length - 1];\n      return scope;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          scopes: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize !== tokenBase && state.tokenize !== null) return CodeMirror.Pass;\n        var delta = 0;\n        if (textAfter === ']' || textAfter === '];' || textAfter === '}' || textAfter === '};' || textAfter === ');') delta = -1;\n        return (state.scopes.length + delta) * _config.indentUnit;\n      },\n      electricChars: \"{}[]();\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-yacas', {\n    name: 'yacas'\n  });\n});","map":null,"metadata":{},"sourceType":"script"}