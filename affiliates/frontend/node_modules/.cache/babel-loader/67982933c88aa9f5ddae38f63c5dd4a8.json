{"ast":null,"code":"import _objectSpread from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/src/components/CarbonCode/embed.js\";\n// Theirs\nimport React from 'react';\nimport url from 'url';\nimport morph from 'morphmorph';\nimport './Styles.css'; // Ours\n\nimport { StylesheetLink, CodeMirrorLink, MetaTags } from './components/Meta';\nimport Carbon from './components/Carbon';\nimport GistContainer from './components/GistContainer';\nimport { DEFAULT_CODE, DEFAULT_SETTINGS } from './lib/constants';\nimport { getQueryStringState } from './lib/routing';\nvar isInIFrame = morph.get('parent.window.parent');\n\nvar getParent = function getParent(win) {\n  var iFrame = isInIFrame(win);\n\n  if (iFrame) {\n    return iFrame;\n  }\n\n  return win.parent;\n};\n\nvar Page = function Page(props) {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(MetaTags, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(StylesheetLink, {\n    theme: props.theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(CodeMirrorLink, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), props.children);\n};\n\nvar Embed =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Embed, _React$Component);\n\n  function Embed() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Embed);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Embed)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = _objectSpread({}, DEFAULT_SETTINGS, {\n      code: \"\",\n      mounted: false,\n      readOnly: true\n    });\n\n    _this.handleUpdate = function (updates) {\n      var query = \"\";\n      var queryParams = {\n        backgroundColor: \"rgba(255, 255, 255, 1)\",\n        dropShadow: false,\n        dropShadowBlurRadius: \"68px\",\n        dropShadowOffsetY: \"20px\",\n        exportSize: \"2x\",\n        fontFamily: \"Hack\",\n        fontSize: \"13px\",\n        language: _this.props.language,\n        lineHeight: \"133%\",\n        lineNumbers: false,\n        paddingHorizontal: \"56px\",\n        paddingVertical: \"40px\",\n        squaredImage: false,\n        theme: \"seti\",\n        watermark: false,\n        widthAdjustment: false,\n        windowControls: true,\n        windowTheme: \"none\"\n      };\n      var initialState = Object.keys(queryParams).length ? queryParams : {};\n\n      _this.setState(_objectSpread({}, initialState, updates, {\n        id: query.id,\n        copyable: queryParams.copy !== false,\n        readOnly: queryParams.readonly !== false,\n        mounted: true\n      }), _this.postMessage);\n    };\n\n    _this.ref = React.createRef();\n\n    _this.postMessage = function () {\n      getParent(window).postMessage(JSON.stringify({\n        // Used by embed provider\n        src: window.location.toString(),\n        context: 'iframe.resize',\n        height: _this.ref.current.offsetHeight\n      }), '*');\n    };\n\n    _this.updateCode = function (code) {\n      _this.setState({\n        code: code\n      }, _this.postMessage);\n\n      getParent(window).postMessage({\n        id: _this.state.id ? \"carbon:\".concat(_this.state.id) : 'carbon',\n        code: code\n      }, '*');\n    };\n\n    return _this;\n  }\n\n  _createClass(Embed, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Page, {\n        theme: this.state.theme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(GistContainer, {\n        onChange: this.handleUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), this.state.mounted && React.createElement(Carbon, {\n        ref: this.ref,\n        config: this.state,\n        readOnly: this.state.readOnly,\n        copyable: this.state.copyable,\n        onChange: this.updateCode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.props.code));\n    }\n  }]);\n\n  return Embed;\n}(React.Component);\n\nexport default Embed;","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/src/components/CarbonCode/embed.js"],"names":["React","url","morph","StylesheetLink","CodeMirrorLink","MetaTags","Carbon","GistContainer","DEFAULT_CODE","DEFAULT_SETTINGS","getQueryStringState","isInIFrame","get","getParent","win","iFrame","parent","Page","props","theme","children","Embed","state","code","mounted","readOnly","handleUpdate","updates","query","queryParams","backgroundColor","dropShadow","dropShadowBlurRadius","dropShadowOffsetY","exportSize","fontFamily","fontSize","language","lineHeight","lineNumbers","paddingHorizontal","paddingVertical","squaredImage","watermark","widthAdjustment","windowControls","windowTheme","initialState","Object","keys","length","setState","id","copyable","copy","readonly","postMessage","ref","createRef","window","JSON","stringify","src","location","toString","context","height","current","offsetHeight","updateCode","Component"],"mappings":"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","sourcesContent":["// Theirs\nimport React from 'react'\nimport url from 'url'\nimport morph from 'morphmorph'\nimport './Styles.css'\n\n// Ours\nimport { StylesheetLink, CodeMirrorLink, MetaTags } from './components/Meta'\nimport Carbon from './components/Carbon'\nimport GistContainer from './components/GistContainer'\nimport { DEFAULT_CODE, DEFAULT_SETTINGS } from './lib/constants'\nimport { getQueryStringState } from './lib/routing'\n\nconst isInIFrame = morph.get('parent.window.parent')\nconst getParent = win => {\n  const iFrame = isInIFrame(win)\n\n  if (iFrame) {\n    return iFrame\n  }\n\n  return win.parent\n}\n\nconst Page = props => (\n  <React.Fragment>\n\n    <MetaTags />\n    <StylesheetLink theme={props.theme} />\n    <CodeMirrorLink />\n    {props.children}\n  </React.Fragment>\n)\n\nclass Embed extends React.Component {\n  state = {\n    ...DEFAULT_SETTINGS,\n    code: \"\",\n    mounted: false,\n    readOnly: true\n  }\n\n  handleUpdate = updates => {\n    const query = \"\"\n    const queryParams = {\n      backgroundColor: \"rgba(255, 255, 255, 1)\",\n      dropShadow: false,\n      dropShadowBlurRadius: \"68px\",\n      dropShadowOffsetY: \"20px\",\n      exportSize: \"2x\",\n      fontFamily: \"Hack\",\n      fontSize: \"13px\",\n      language: this.props.language,\n      lineHeight: \"133%\",\n      lineNumbers: false,\n      paddingHorizontal: \"56px\",\n      paddingVertical: \"40px\",\n      squaredImage: false,\n      theme: \"seti\",\n      watermark: false,\n      widthAdjustment: false,\n      windowControls: true,\n      windowTheme: \"none\"\n    }\n    const initialState = Object.keys(queryParams).length ? queryParams : {}\n    this.setState(\n      {\n        ...initialState,\n        ...updates,\n        id: query.id,\n        copyable: queryParams.copy !== false,\n        readOnly: queryParams.readonly !== false,\n        mounted: true\n      },\n      this.postMessage\n    )\n  }\n\n  ref = React.createRef()\n\n  postMessage = () => {\n    getParent(window).postMessage(\n      JSON.stringify({\n        // Used by embed provider\n        src: window.location.toString(),\n        context: 'iframe.resize',\n        height: this.ref.current.offsetHeight\n      }),\n      '*'\n    )\n  }\n\n  updateCode = code => {\n    this.setState({ code }, this.postMessage)\n\n    getParent(window).postMessage(\n      {\n        id: this.state.id ? `carbon:${this.state.id}` : 'carbon',\n        code\n      },\n      '*'\n    )\n  }\n\n  render() {\n    return (\n      <Page theme={this.state.theme}>\n        <GistContainer onChange={this.handleUpdate} />\n        {this.state.mounted && (\n          <Carbon\n            ref={this.ref}\n            config={this.state}\n            readOnly={this.state.readOnly}\n            copyable={this.state.copyable}\n            onChange={this.updateCode}\n          >\n            {this.props.code}\n          </Carbon>\n        )}\n      </Page>\n    )\n  }\n}\n\nexport default Embed\n"]},"metadata":{},"sourceType":"module"}