{"ast":null,"code":"import Morph from 'morphmorph';\nvar mapper = new Morph({\n  types: {\n    bool: function bool(v) {\n      if (v == null) return undefined;\n      if (v === 'false') return false;\n      return Boolean(v);\n    }\n  }\n});\nvar mappings = [{\n  field: 'bg:backgroundColor'\n}, {\n  field: 't:theme'\n}, {\n  field: 'wt:windowTheme'\n}, {\n  field: 'l:language'\n}, {\n  field: 'ds:dropShadow',\n  type: 'bool'\n}, {\n  field: 'dsyoff:dropShadowOffsetY'\n}, {\n  field: 'dsblur:dropShadowBlurRadius'\n}, {\n  field: 'wc:windowControls',\n  type: 'bool'\n}, {\n  field: 'wa:widthAdjustment',\n  type: 'bool'\n}, {\n  field: 'pv:paddingVertical'\n}, {\n  field: 'ph:paddingHorizontal'\n}, {\n  field: 'ln:lineNumbers',\n  type: 'bool'\n}, {\n  field: 'fm:fontFamily'\n}, {\n  field: 'fs:fontSize'\n}, {\n  field: 'lh:lineHeight'\n}, {\n  field: 'si:squaredImage',\n  type: 'bool'\n}, {\n  field: 'code:code'\n}, {\n  field: 'es:exportSize'\n}, {\n  field: 'wm:watermark',\n  type: 'bool'\n}, {\n  field: 'copy',\n  type: 'bool'\n}, {\n  field: 'readonly',\n  type: 'bool'\n}];\nvar reverseMappings = mappings.map(function (mapping) {\n  return Object.assign({}, mapping, {\n    field: mapping.field.split(':').reverse().join(':')\n  });\n});\nexport var serializeState = function serializeState(state) {\n  var stateString = encodeURIComponent(JSON.stringify(state));\n  return encodeURIComponent(typeof window !== 'undefined' ? btoa(stateString) : Buffer.from(stateString).toString('base64'));\n};\nexport var deserializeState = function deserializeState(serializedState) {\n  var stateString;\n\n  if (typeof window !== 'undefined') {\n    stateString = atob(serializedState);\n  } else {\n    stateString = Buffer.from(serializedState, 'base64').toString();\n  }\n\n  return JSON.parse(decodeURIComponent(stateString));\n};\nexport var getQueryStringState = function getQueryStringState(query) {\n  if (query.state) {\n    return deserializeState(query.state);\n  }\n\n  var state = mapper.map(mappings, query);\n  deserializeCode(state);\n  Object.keys(state).forEach(function (key) {\n    if (state[key] === '') state[key] = undefined;\n  });\n  return state;\n};\nexport var updateQueryString = function updateQueryString(router, state) {\n  var mappedState = mapper.map(reverseMappings, state);\n  serializeCode(mappedState);\n  router.replace({\n    pathname: router.pathname\n  }, {\n    pathname: router.pathname,\n    query: mappedState\n  }, {\n    shallow: true\n  });\n}; // private\n\nfunction serializeCode(state) {\n  try {\n    if (state.code) state.code = encodeURIComponent(state.code);\n  } catch (e) {// encoding errors should not crash the app\n  }\n}\n\nfunction deserializeCode(state) {\n  try {\n    if (state.code) state.code = decodeURIComponent(state.code);\n  } catch (e) {// decoding errors should not crash the app\n  }\n}","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/src/components/CarbonCode/lib/routing.js"],"names":["Morph","mapper","types","bool","v","undefined","Boolean","mappings","field","type","reverseMappings","map","mapping","Object","assign","split","reverse","join","serializeState","state","stateString","encodeURIComponent","JSON","stringify","window","btoa","Buffer","from","toString","deserializeState","serializedState","atob","parse","decodeURIComponent","getQueryStringState","query","deserializeCode","keys","forEach","key","updateQueryString","router","mappedState","serializeCode","replace","pathname","shallow","code","e"],"mappings":"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","sourcesContent":["import Morph from 'morphmorph'\n\nconst mapper = new Morph({\n  types: {\n    bool: v => {\n      if (v == null) return undefined\n      if (v === 'false') return false\n      return Boolean(v)\n    }\n  }\n})\n\nconst mappings = [\n  { field: 'bg:backgroundColor' },\n  { field: 't:theme' },\n  { field: 'wt:windowTheme' },\n  { field: 'l:language' },\n  { field: 'ds:dropShadow', type: 'bool' },\n  { field: 'dsyoff:dropShadowOffsetY' },\n  { field: 'dsblur:dropShadowBlurRadius' },\n  { field: 'wc:windowControls', type: 'bool' },\n  { field: 'wa:widthAdjustment', type: 'bool' },\n  { field: 'pv:paddingVertical' },\n  { field: 'ph:paddingHorizontal' },\n  { field: 'ln:lineNumbers', type: 'bool' },\n  { field: 'fm:fontFamily' },\n  { field: 'fs:fontSize' },\n  { field: 'lh:lineHeight' },\n  { field: 'si:squaredImage', type: 'bool' },\n  { field: 'code:code' },\n  { field: 'es:exportSize' },\n  { field: 'wm:watermark', type: 'bool' },\n  { field: 'copy', type: 'bool' },\n  { field: 'readonly', type: 'bool' }\n]\n\nconst reverseMappings = mappings.map(mapping =>\n  Object.assign({}, mapping, {\n    field: mapping.field\n      .split(':')\n      .reverse()\n      .join(':')\n  })\n)\n\nexport const serializeState = state => {\n  const stateString = encodeURIComponent(JSON.stringify(state))\n\n  return encodeURIComponent(\n    typeof window !== 'undefined' ? btoa(stateString) : Buffer.from(stateString).toString('base64')\n  )\n}\n\nexport const deserializeState = serializedState => {\n  let stateString\n  if (typeof window !== 'undefined') {\n    stateString = atob(serializedState)\n  } else {\n    stateString = Buffer.from(serializedState, 'base64').toString()\n  }\n\n  return JSON.parse(decodeURIComponent(stateString))\n}\n\nexport const getQueryStringState = query => {\n  if (query.state) {\n    return deserializeState(query.state)\n  }\n\n  const state = mapper.map(mappings, query)\n  deserializeCode(state)\n\n  Object.keys(state).forEach(key => {\n    if (state[key] === '') state[key] = undefined\n  })\n\n  return state\n}\n\nexport const updateQueryString = (router, state) => {\n  const mappedState = mapper.map(reverseMappings, state)\n  serializeCode(mappedState)\n\n  router.replace(\n    {\n      pathname: router.pathname\n    },\n    {\n      pathname: router.pathname,\n      query: mappedState\n    },\n    { shallow: true }\n  )\n}\n\n// private\nfunction serializeCode(state) {\n  try {\n    if (state.code) state.code = encodeURIComponent(state.code)\n  } catch (e) {\n    // encoding errors should not crash the app\n  }\n}\n\nfunction deserializeCode(state) {\n  try {\n    if (state.code) state.code = decodeURIComponent(state.code)\n  } catch (e) {\n    // decoding errors should not crash the app\n  }\n}\n"]},"metadata":{},"sourceType":"module"}