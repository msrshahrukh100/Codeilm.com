{"ast":null,"code":"var _classCallCheck = require(\"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _toConsumableArray = require(\"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _require = require('./src/maybe'),\n    Maybe = _require.Maybe,\n    maybe = _require.maybe;\n\nvar _require2 = require('./src/either'),\n    Either = _require2.Either,\n    either = _require2.either,\n    left = _require2.left;\n\nvar id = function id(_) {\n  return _;\n};\n\nvar DEFAULTS = {\n  types: {},\n  objDelimiter: '.',\n  mapDelimiter: ':',\n  preFilters: [],\n  postFilters: []\n  /* --- Functional Utilities --- */\n\n};\n\nvar _map = function map(fn) {\n  return function (x) {\n    return x.map ? x.map(fn) : fn(x);\n  };\n}; // FIXME remove check\n\n\nvar join = function join(m) {\n  return m.join();\n}; // const chain = fn => m => m.chain(fn)\n\n\nvar compose = function compose() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (res) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    return fns.reduceRight(function (accum, next) {\n      return next.apply(void 0, [accum].concat(args));\n    }, res);\n  };\n};\n\nvar reduce = function reduce(fn) {\n  return function (zero) {\n    return function (xs) {\n      return xs.reduce(fn, zero);\n    };\n  };\n};\n/* ---------------------------- */\n\n\nvar split = function split(d) {\n  return function (s) {\n    return s.split(d);\n  };\n};\n\nvar createRootObj = compose(function (n) {\n  return maybe(Object.create(null))(Array)(Maybe.of(isNaN(n) ? undefined : n));\n}, Number);\n\nvar normalizeField = function normalizeField(delimiter) {\n  return function (m) {\n    return Maybe.of(m).map(function (m) {\n      return m.indexOf(delimiter) > -1;\n    }).map(function (b) {\n      return b ? m : m + delimiter + m;\n    }).map(split(delimiter));\n  };\n};\n\nvar getMapSpec = function getMapSpec(delimiter) {\n  return function (mapping) {\n    return Maybe.of(mapping).map(Array.isArray).map(function (b) {\n      return b ? Either.of(mapping) : left(mapping);\n    }).map(either(compose(join, normalizeField(delimiter)), reduce(function (spec, field) {\n      return normalizeField(delimiter)(field).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            source = _ref2[0],\n            target = _ref2[1];\n\n        return [[].concat(_toConsumableArray(spec[0]), [source]), target];\n      }).join();\n    })([[], null])));\n  };\n};\n\nvar normalizeMapping = function normalizeMapping(mapping) {\n  return typeof mapping === 'string' ? {\n    field: mapping\n  } : mapping;\n};\n\nvar getMappingFilter = function getMappingFilter(type, types) {\n  if (Array.isArray(type)) return compose.apply(void 0, _toConsumableArray(type));\n  if (typeof type === 'function') return type;\n  if (Object.prototype.hasOwnProperty.call(types, type)) return types[type];\n  return id;\n};\n\nvar getKey = reduce(function (accum, k) {\n  return accum ? accum[k] : undefined;\n});\n\nvar get = function get(key) {\n  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULTS.objDelimiter;\n  return function (obj) {\n    return compose(maybe(obj)(getKey(obj)), _map(split(delimiter)), Maybe.of)(key);\n  };\n};\n\nvar setKey = function setKey(value) {\n  return reduce(function (accum, key, i, array) {\n    if (i === array.length - 1) accum[key] = value;else if (!accum[key]) accum[key] = createRootObj(array[i + 1]);\n    return accum[key];\n  });\n};\n\nvar assign = function assign(key) {\n  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULTS.objDelimiter;\n  return function (obj, value) {\n    return compose(maybe(obj)(compose(function () {\n      return obj;\n    }, setKey(value)(obj))), _map(split(delimiter)), Maybe.of)(key);\n  };\n};\n\nvar Mapper =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Mapper(options) {\n    _classCallCheck(this, Mapper);\n\n    this.config = Object.assign({}, DEFAULTS, options);\n  }\n\n  _createClass(Mapper, [{\n    key: \"map\",\n    value: function map(mappings, curr) {\n      var _this = this;\n\n      var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.create(null);\n      return mappings.map(normalizeMapping).reduce(function (accum, mapping) {\n        return Maybe.of(mapping.field).chain(getMapSpec(_this.config.mapDelimiter)).chain(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              sourceField = _ref4[0],\n              targetField = _ref4[1];\n\n          return Either.of(sourceField).map(_map(function (field) {\n            return get(field, _this.config.objDelimiter)(curr);\n          })).map(function (_) {\n            return compose.apply(void 0, _toConsumableArray(_this.config.postFilters).concat([getMappingFilter(mapping.type, _this.config.types)], _toConsumableArray(_this.config.preFilters)))(_, mapping, _this.config, curr, accum);\n          }).map(Maybe.of).chain(maybe(accum)(assign(targetField, _this.config.objDelimiter).bind(_this, accum)));\n        });\n      }, next);\n    }\n  }]);\n\n  return Mapper;\n}();\n/* Static methods */\n\n\nMapper.get = get;\nMapper.assign = assign;\nMapper.compose = compose;\nexports.default = Mapper;\nmodule.exports = Mapper;","map":null,"metadata":{},"sourceType":"script"}