{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n// Apache mode by gloony\nvar CodeMirror = require('codemirror');\n\nCodeMirror.defineMode('apache', function ()\n/* config */\n{\n  return {\n    token: function token(stream, state) {\n      var sol = stream.sol() || state.afterSection;\n      var eol = stream.eol();\n      state.afterSection = false;\n\n      if (sol) {\n        if (state.nextMultiline) {\n          state.inMultiline = true;\n          state.nextMultiline = false;\n        } else {\n          state.position = 'def';\n        }\n      }\n\n      if (eol && !state.nextMultiline) {\n        state.inMultiline = false;\n        state.position = 'def';\n      }\n\n      if (sol) {\n        while (stream.eatSpace()) {\n          /* pass */\n        }\n      }\n\n      var ch = stream.next();\n\n      if (sol && ch === '#') {\n        state.position = 'comment';\n        stream.skipToEnd();\n        return 'comment';\n      } else if (ch === '!' && stream.peek() !== ' ') {\n        return 'number';\n      } else if (ch === ' ') {\n        if (stream.peek() === '[') {\n          if (stream.skipTo(']')) {\n            stream.next();\n          } else {\n            stream.skipToEnd();\n          }\n\n          return 'keyword';\n        } else if (stream.peek() === '(') {\n          if (stream.skipTo(')')) {\n            stream.next();\n          } else {\n            stream.skipToEnd();\n          }\n\n          return 'string';\n        } else {\n          state.position = 'unit';\n          return 'unit';\n        }\n      } else if (ch === '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next();\n        } else {\n          stream.skipToEnd();\n        }\n\n        return 'quote';\n      } else if (sol && ch === '<') {\n        if (stream.skipTo('>')) {\n          stream.next();\n        } else {\n          stream.skipToEnd();\n        }\n\n        return 'meta';\n      } else if (ch === '%') {\n        if (stream.peek() === '{') {\n          if (stream.skipTo('}')) {\n            stream.next();\n          } else {\n            stream.skipToEnd();\n          }\n\n          return 'operator';\n        }\n      } else if (ch === '$') {\n        if (!isNaN(stream.peek()) && stream.peek() !== ' ') {\n          while (!isNaN(stream.peek()) && stream.peek() !== ' ') {\n            stream.next();\n          }\n\n          return 'operator';\n        }\n      } else if (ch === '\\\\') {\n        if (stream.peek() === '.') {\n          if (stream.skipTo(' ')) {\n            stream.next();\n          } else {\n            stream.skipToEnd();\n          }\n\n          return 'string';\n        }\n      } else if (ch === '.') {\n        if (stream.peek() === '*') {\n          if (stream.skipTo(' ')) {\n            stream.next();\n          } else {\n            stream.skipToEnd();\n          }\n\n          return 'string';\n        }\n      } else if (ch === '^') {\n        if (stream.skipTo(' ')) {\n          stream.next();\n        } else {\n          stream.skipToEnd();\n        }\n\n        return 'string';\n      }\n\n      return state.position;\n    },\n    // electricInput: /<\\/[\\s\\w:]+>$/,\n    lineComment: '#',\n    fold: 'brace',\n    startState: function startState() {\n      return {\n        position: 'def',\n        nextMultiline: false,\n        inMultiline: false,\n        afterSection: false\n      };\n    }\n  };\n});\nCodeMirror.defineMIME('text/apache', 'apache');\nCodeMirror.defineMIME('text/htaccess', 'apache');","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/src/components/CarbonCode/lib/custom/modes/apache.js"],"names":["CodeMirror","require","defineMode","token","stream","state","sol","afterSection","eol","nextMultiline","inMultiline","position","eatSpace","ch","next","skipToEnd","peek","skipTo","isNaN","lineComment","fold","startState","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n// Apache mode by gloony\n\nconst CodeMirror = require('codemirror')\n\nCodeMirror.defineMode('apache', function(/* config */) {\n  return {\n    token: function(stream, state) {\n      var sol = stream.sol() || state.afterSection\n      var eol = stream.eol()\n\n      state.afterSection = false\n\n      if (sol) {\n        if (state.nextMultiline) {\n          state.inMultiline = true\n          state.nextMultiline = false\n        } else {\n          state.position = 'def'\n        }\n      }\n\n      if (eol && !state.nextMultiline) {\n        state.inMultiline = false\n        state.position = 'def'\n      }\n\n      if (sol) {\n        while (stream.eatSpace()) {\n          /* pass */\n        }\n      }\n\n      var ch = stream.next()\n\n      if (sol && ch === '#') {\n        state.position = 'comment'\n        stream.skipToEnd()\n        return 'comment'\n      } else if (ch === '!' && stream.peek() !== ' ') {\n        return 'number'\n      } else if (ch === ' ') {\n        if (stream.peek() === '[') {\n          if (stream.skipTo(']')) {\n            stream.next()\n          } else {\n            stream.skipToEnd()\n          }\n          return 'keyword'\n        } else if (stream.peek() === '(') {\n          if (stream.skipTo(')')) {\n            stream.next()\n          } else {\n            stream.skipToEnd()\n          }\n          return 'string'\n        } else {\n          state.position = 'unit'\n          return 'unit'\n        }\n      } else if (ch === '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next()\n        } else {\n          stream.skipToEnd()\n        }\n        return 'quote'\n      } else if (sol && ch === '<') {\n        if (stream.skipTo('>')) {\n          stream.next()\n        } else {\n          stream.skipToEnd()\n        }\n        return 'meta'\n      } else if (ch === '%') {\n        if (stream.peek() === '{') {\n          if (stream.skipTo('}')) {\n            stream.next()\n          } else {\n            stream.skipToEnd()\n          }\n          return 'operator'\n        }\n      } else if (ch === '$') {\n        if (!isNaN(stream.peek()) && stream.peek() !== ' ') {\n          while (!isNaN(stream.peek()) && stream.peek() !== ' ') {\n            stream.next()\n          }\n          return 'operator'\n        }\n      } else if (ch === '\\\\') {\n        if (stream.peek() === '.') {\n          if (stream.skipTo(' ')) {\n            stream.next()\n          } else {\n            stream.skipToEnd()\n          }\n          return 'string'\n        }\n      } else if (ch === '.') {\n        if (stream.peek() === '*') {\n          if (stream.skipTo(' ')) {\n            stream.next()\n          } else {\n            stream.skipToEnd()\n          }\n          return 'string'\n        }\n      } else if (ch === '^') {\n        if (stream.skipTo(' ')) {\n          stream.next()\n        } else {\n          stream.skipToEnd()\n        }\n        return 'string'\n      }\n\n      return state.position\n    },\n\n    // electricInput: /<\\/[\\s\\w:]+>$/,\n    lineComment: '#',\n    fold: 'brace',\n\n    startState: function() {\n      return {\n        position: 'def',\n        nextMultiline: false,\n        inMultiline: false,\n        afterSection: false\n      }\n    }\n  }\n})\n\nCodeMirror.defineMIME('text/apache', 'apache')\nCodeMirror.defineMIME('text/htaccess', 'apache')\n"]},"metadata":{},"sourceType":"module"}