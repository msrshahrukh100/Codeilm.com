{"ast":null,"code":"/*\n  RISC-V Code Mirror Mode\n\n  Based on the mode present in the Venus Simulator\n    Author: kvakil\n    Source: https://github.com/kvakil/venus\n\n  Forked by Matthew Nielsen (github.com/matthewnielsen27)\n*/\nvar CodeMirror = require('codemirror');\n\nCodeMirror.defineMode('riscv', function ()\n/* config */\n{\n  function regexFromWords(words, ins) {\n    return new RegExp('^(?:' + words.join('|') + ')$', ins);\n  } // Instructions\n  // Part 1) Base Integer Instructions\n  //        a) Loads\n  //        b) Stores\n  //        c) Shifts\n  //        d) Arithmetic\n  //        e) Logical\n  //        f) Compare\n  //        g) Branches\n  //        h) Jump & Link\n  //        i) Synch\n  //        j) System\n  //        k) Counters\n  // Part 2) RV Priveleged Instructions\n  //        a) CSR Access\n  //        b) Change Level\n  //        c) Trap Redirect\n  // Part 3) Optional Multiply-Divide Instruction Extension: RVM\n  //        a) Multiply\n  //        b) Divide\n  //        c) Remainder\n  // Part 4) Pseudo Instructions\n  //        a) Standard\n  //        b) Non-Standard\n  // Part 5) Optional Compressed (16-bit) Instruction Extension: RVC\n  //        a) Loads\n  //        b) Stores\n  //        c) Arithmetic\n  //        d) Shifts\n  //        e) Branches\n  //        f) Jump\n  //        g) Jump & Link\n  //        h) System\n  // Part 6) Optional Atomic Instruction Extension: RVA\n  //        a) Load\n  //        b) Store\n  //        c) Swap\n  //        d) Add\n  //        e) Logical\n  //        f) Min\\Max\n  // Part 7) Optional Floating-Point Instruction Extension: RVF, RVD, & RVQ\n  //        a) Move\n  //        b) Convert\n  //        c) Load\n  //        d) Store\n  //        e) Arithmetic\n  //        f) Mui-Add\n  //        g) Sign Inject\n  //        h) Min/Max\n  //        i) Compare\n  //        j) Categorization\n  //        k) Configuration\n\n\n  var instructions = regexFromWords([// Part 1) Base Integer Instructions\n  //        a) Loads\n  //          I) RV32I\n  'lb', 'lh', 'lw', 'lbu', 'lhu', //          II) RV64I and RV128I\n  'ld', 'lq', 'lwu', 'ldu', //        b) Stores\n  //          I) RV32I\n  'sb', 'sh', 'sw', //          II) RV64I and RV128I\n  'sd', 'sq', //        c) Shifts\n  //          I) RV32I\n  'sll', 'slli', 'srl', 'srli', 'sra', 'srai', //          II) RV64I and RV128I\n  'sllw', 'slliw', 'srlw', 'srliw', 'sraw', 'sraiw', 'slld', 'sllid', 'srld', 'srlid', 'srad', 'sraid', //        d) Arithmetic\n  //          I) RV32I\n  'add', 'addi', 'sub', 'lui', 'auipc', //          II) RV64I and RV128I\n  'addw', 'addiw', 'subw', 'addd', 'addid', 'subd', //        e) Logical\n  'xor', 'xori', 'or', 'ori', 'and', 'andi', //        f) Compare\n  'slt', 'slti', 'sltu', 'sltiu', //        g) Branches\n  'beq', 'bne', 'blt', 'bge', 'bltu', 'bgeu', //        h) Jump & Link\n  'jal', 'jalr', //        i) Synch\n  'fence', 'fence.i', //        j) System\n  'scall', 'sbreak', //        k) Counters\n  'rdcycle', 'rdcycleh', 'rdtime', 'rdtimeh', 'rdinstret', 'rdinstreth', // Part 2) RV Priveleged Instructions\n  //        a) CSR Access\n  'csrrw', 'csrrs', 'csrrc', 'csrrwi', 'csrrsi', 'csrrci', //        b) Change Level\n  'ecall', 'ebreak', 'eret', //        c) Trap Redirect\n  'mrts', 'mrth', 'hrts', // Part 3) Optional Multiply-Divide Instruction Extension: RVM\n  //        a) Multiply\n  //          I) RV32M\n  'mul', 'mulh', 'mulhsu', //          II) RV64M and RV128M\n  'mulw', 'muld', //        b) Divide\n  //          I) RV32M\n  'div', 'divu', //          II) RV64M and RV128M\n  'divw', 'divd', //        c) Remainder\n  //          I) RV32M\n  'rem', 'remu', //          II) RV64M and RV128M\n  'remw', 'remuw', 'remd', 'remud', // Part 4) Pseudo Instructions\n  //        a) Standard Psuedo Instructions\n  'beqz', 'bgez', 'bgt', 'bgtu', 'bgtz', 'ble', 'bleu', 'blez', 'bltz', 'bnez', 'call', 'j', 'jr', 'la', 'li', 'mv', 'neg', 'nop', 'ret', 'not', 'ret', 'seqz', 'sgtz', 'sltz', 'snez', 'tail', //        b) Non-Standard Psuedo Instructions\n  'seq', 'sge', 'sgeu', 'sgt', 'sgtu', 'sle', 'sleu', 'sne', // Part 5) Optional Compressed (16-bit) Instruction Extension: RVC\n  //        a) Loads\n  'c.lw', 'c.lwsp', 'c.ld', 'c.ldsp', 'c.lq', 'c.lqsp', //        b) Stores\n  'c.sw', 'c.swsp', 'c.sd', 'c.sdsp', 'c.sq', 'c.sqsp', //        c) Arithmetic\n  'c.add', 'c.addw', 'c.addi', 'c.addiw', 'c.addi16sp', 'c.addi2spn', 'c.li', 'c.lui', 'c.mv', 'c.sub', //        d) Shifts\n  'c.slli', //        e) Branches\n  'c.beqz', 'c.bnez', //        f) Jump\n  'c.j', 'c.jr', //        g) Jump & Link\n  'c.jal', 'c.jalr', //        h) System\n  'c.ebreak', // Part 6) Optional Atomic Instruction Extrnsion: RVA\n  //        a) Load\n  //          I) RV32A\n  'lr.w', //          II) RV64A and RV128A\n  'lr.d', 'lr.q', //        b) Store\n  //          I) RV32A\n  'sc.w', //          II) RV64A and RV128A\n  'sc.d', 'sc.q', //        c) Swap\n  //          I) RV32A\n  'amoswap.w', //          II) RV64A and RV128A\n  'amoswap.d', 'amoswap.q', //        d) Add\n  //          I) RV32A\n  'amoadd.w', //          II) RV64A and RV128A\n  'amoadd.d', 'amoadd.q', //        e) Logical\n  //          I) RV32A\n  'amoxor.w', 'amoand.w', 'amoor.w', //          II) RV64A and RV128A\n  'amoxor.d', 'amoand.d', 'amoor.d', 'amoxor.q', 'amoand.q', 'amoor.q', //        f) Min\\Max\n  //          I) RV32A\n  'amomin.w', 'amomax.w', 'amominu.w', 'amomax.w', //          II) RV64A and RV128A\n  'amomin.d', 'amomax.d', 'amominu.d', 'amomax.d', 'amomin.q', 'amomax.q', 'amominu.q', 'amomax.q', // Part 7) Optional Floating-Point Instruction Extension: RVF, RVD, & RVQ\n  //        a) Move\n  //          I) RV32-\n  'fmv.h.x', 'fmv.s.s', 'fmv.x.h', 'fmv.x.s', //          II) RV64- and RV128-\n  'fmv.d.x', 'fmv.q.s', 'fmv.d.h', 'fmv.q.s', //        b) Convert\n  //          I) RV32-\n  'fcvt.h.w', 'fcvt.s.w', 'fcvt.d.w', 'fcvt.q.w', 'fcvt.h.wu', 'fcvt.s.wu', 'fcvt.d.wu', 'fcvt.q.wu', 'fcvt.w.h', 'fcvt.w.s', 'fcvt.w.d', 'fcvt.w.q', 'fcvt.wu.h', 'fcvt.w.s', 'fcvt.w.d', 'fcvt.w.q', //          II) RV64- and RV128-\n  'fcvt.h.l', 'fcvt.h.t', 'fcvt.h.lu', 'fcvt.h.tu', 'fcvt.s.l', 'fcvt.s.t', 'fcvt.s.lu', 'fcvt.s.tu', 'fcvt.d.l', 'fcvt.d.t', 'fcvt.d.lu', 'fcvt.d.tu', 'fcvt.q.l', 'fcvt.q.t', 'fcvt.q.lu', 'fcvt.q.tu', 'fcvt.l.h', 'fcvt.t.h', 'fcvt.lu.h', 'fcvt.tu.h', 'fcvt.l.s', 'fcvt.t.s', 'fcvt.lu.s', 'fcvt.tu.s', 'fcvt.l.d', 'fcvt.t.d', 'fcvt.lu.d', 'fcvt.tu.d', 'fcvt.l.q', 'fcvt.t.q', 'fcvt.lu.q', 'fcvt.tu.q', //        c) Load\n  'flw', 'fld', 'flq', //        d) Store\n  'fsw', 'fsd', 'fsq', //        e) Arithmetic\n  'fadd.s', 'fsub.s', 'fmul.s', 'fdiv.s', 'fsqrt.s', 'fadd.d', 'fsub.d', 'fmul.d', 'fdiv.d', 'fsqrt.d', 'fadd.q', 'fsub.q', 'fmul.q', 'fdiv.q', 'fsqrt.q', //        f) Mul-Add\n  'fmadd.d', 'fmsub.d', 'fnmsub.d', 'fnmadd.d', 'fmadd.d', 'fmsub.d', 'fnmsub.d', 'fnmadd.d', 'fmadd.q', 'fmsub.q', 'fnmsub.q', 'fnmadd.q', //        g) Sign Inject\n  'fsgnj.s', 'fsgnjn.s', 'fsgnjx.s', 'fsgnj.d', 'fsgnjn.d', 'fsgnjx.d', 'fsgnj.q', 'fsgnjn.q', 'fsgnjx.q', //        h) Min/Max\n  'fmin.s', 'fmax.s', 'fmin.d', 'fmax.d', 'fmin.q', 'fmax.q', //        i) Compare\n  'feq.s', 'flt.s', 'fle.s', 'feq.d', 'flt.d', 'fle.d', 'feq.q', 'flt.q', 'fle.q', //        j) Categorization\n  'fclass.s', 'fclass.d', 'fclass.q', //        k) Configuration\n  'frcsr', 'frrm', 'frflags', 'fscsr', 'fsrm', 'fsflags', 'fsrmi', 'fsflagsi'], 'i'); // Registers\n  // Part 1) Actual Register Values\n  // Part 2) Application Binary Interface\n\n  var registers = regexFromWords([// Part 1) Actual Register Values\n  'x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23', 'x24', 'x25', 'x26', 'x27', 'x28', 'x29', 'x30', 'x31', // Part 2) Application Binary Interface\n  'zero', 'ra', 'sp', 'gp', 'tp', 't0', 't1', 't2', 's0', 's1', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 's10', 's11', 't3', 't4', 't5', 't6', 'pc'], ''); // Keywords\n  // Part 1) Pseudo Operations\n\n  var keywords = regexFromWords([// Part 1) Pseudo Operations\n  '.align', '.file', '.globl', '.local', '.comm', '.common', '.ident', '.section', '.size', '.text', '.data', '.rodata', '.bss', '.string', '.asciz', '.asciiz', '.equ', '.macro', '.endm', '.type', '.option', '.byte', '.2byte', '.half', '.short', '.4byte', '.word', '.long', '.8byte', '.dword', '.quad', '.dtprelword', '.dtpreldword', '.sleb128', '.uleb128', '.p2align', '.balign', '.zero', '.float', '.double'], 'i');\n\n  function normal(stream, state) {\n    var ch = stream.next();\n\n    if (ch == '#') {\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    if (ch == '\"' || ch == \"'\") {\n      state.cur = string(ch);\n      return state.cur(stream, state);\n    }\n\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w.%]/); // Handle numeric labels\n\n      if (stream.peek() === ':') {\n        return 'variable';\n      }\n\n      return 'number';\n    }\n\n    if (/[.\\w_]/.test(ch)) {\n      stream.eatWhile(/[\\w\\\\\\-_.]/);\n      return 'variable';\n    }\n\n    return null;\n  }\n\n  function string(quote) {\n    return function (stream, state) {\n      var escaped = false,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) break;\n        escaped = !escaped && ch == '\\\\';\n      }\n\n      if (!escaped) state.cur = normal;\n      return 'string';\n    };\n  }\n\n  return {\n    startState: function startState(basecol) {\n      return {\n        basecol: basecol || 0,\n        indentDepth: 0,\n        cur: normal\n      };\n    },\n    token: function token(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.cur(stream, state);\n      var word = stream.current();\n\n      if (style == 'variable') {\n        if (keywords.test(word)) style = 'keyword';else if (instructions.test(word)) style = 'builtin';else if (registers.test(word)) style = 'variable-2';\n      }\n\n      return style;\n    }\n  };\n});\nCodeMirror.defineMIME('text/riscv', 'riscv');","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/src/components/CarbonCode/lib/custom/modes/riscv.js"],"names":["CodeMirror","require","defineMode","regexFromWords","words","ins","RegExp","join","instructions","registers","keywords","normal","stream","state","ch","next","skipToEnd","cur","string","test","eatWhile","peek","quote","escaped","startState","basecol","indentDepth","token","eatSpace","style","word","current","defineMIME"],"mappings":"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","sourcesContent":["/*\n  RISC-V Code Mirror Mode\n\n  Based on the mode present in the Venus Simulator\n    Author: kvakil\n    Source: https://github.com/kvakil/venus\n\n  Forked by Matthew Nielsen (github.com/matthewnielsen27)\n*/\n\nconst CodeMirror = require('codemirror')\n\nCodeMirror.defineMode('riscv', function(/* config */) {\n  function regexFromWords(words, ins) {\n    return new RegExp('^(?:' + words.join('|') + ')$', ins)\n  }\n\n  // Instructions\n  // Part 1) Base Integer Instructions\n  //        a) Loads\n  //        b) Stores\n  //        c) Shifts\n  //        d) Arithmetic\n  //        e) Logical\n  //        f) Compare\n  //        g) Branches\n  //        h) Jump & Link\n  //        i) Synch\n  //        j) System\n  //        k) Counters\n  // Part 2) RV Priveleged Instructions\n  //        a) CSR Access\n  //        b) Change Level\n  //        c) Trap Redirect\n  // Part 3) Optional Multiply-Divide Instruction Extension: RVM\n  //        a) Multiply\n  //        b) Divide\n  //        c) Remainder\n  // Part 4) Pseudo Instructions\n  //        a) Standard\n  //        b) Non-Standard\n  // Part 5) Optional Compressed (16-bit) Instruction Extension: RVC\n  //        a) Loads\n  //        b) Stores\n  //        c) Arithmetic\n  //        d) Shifts\n  //        e) Branches\n  //        f) Jump\n  //        g) Jump & Link\n  //        h) System\n  // Part 6) Optional Atomic Instruction Extension: RVA\n  //        a) Load\n  //        b) Store\n  //        c) Swap\n  //        d) Add\n  //        e) Logical\n  //        f) Min\\Max\n  // Part 7) Optional Floating-Point Instruction Extension: RVF, RVD, & RVQ\n  //        a) Move\n  //        b) Convert\n  //        c) Load\n  //        d) Store\n  //        e) Arithmetic\n  //        f) Mui-Add\n  //        g) Sign Inject\n  //        h) Min/Max\n  //        i) Compare\n  //        j) Categorization\n  //        k) Configuration\n  var instructions = regexFromWords(\n    [\n      // Part 1) Base Integer Instructions\n      //        a) Loads\n      //          I) RV32I\n      'lb',\n      'lh',\n      'lw',\n      'lbu',\n      'lhu',\n      //          II) RV64I and RV128I\n      'ld',\n      'lq',\n      'lwu',\n      'ldu',\n      //        b) Stores\n      //          I) RV32I\n      'sb',\n      'sh',\n      'sw',\n      //          II) RV64I and RV128I\n      'sd',\n      'sq',\n      //        c) Shifts\n      //          I) RV32I\n      'sll',\n      'slli',\n      'srl',\n      'srli',\n      'sra',\n      'srai',\n      //          II) RV64I and RV128I\n      'sllw',\n      'slliw',\n      'srlw',\n      'srliw',\n      'sraw',\n      'sraiw',\n      'slld',\n      'sllid',\n      'srld',\n      'srlid',\n      'srad',\n      'sraid',\n      //        d) Arithmetic\n      //          I) RV32I\n      'add',\n      'addi',\n      'sub',\n      'lui',\n      'auipc',\n      //          II) RV64I and RV128I\n      'addw',\n      'addiw',\n      'subw',\n      'addd',\n      'addid',\n      'subd',\n      //        e) Logical\n      'xor',\n      'xori',\n      'or',\n      'ori',\n      'and',\n      'andi',\n      //        f) Compare\n      'slt',\n      'slti',\n      'sltu',\n      'sltiu',\n      //        g) Branches\n      'beq',\n      'bne',\n      'blt',\n      'bge',\n      'bltu',\n      'bgeu',\n      //        h) Jump & Link\n      'jal',\n      'jalr',\n      //        i) Synch\n      'fence',\n      'fence.i',\n      //        j) System\n      'scall',\n      'sbreak',\n      //        k) Counters\n      'rdcycle',\n      'rdcycleh',\n      'rdtime',\n      'rdtimeh',\n      'rdinstret',\n      'rdinstreth',\n\n      // Part 2) RV Priveleged Instructions\n      //        a) CSR Access\n      'csrrw',\n      'csrrs',\n      'csrrc',\n      'csrrwi',\n      'csrrsi',\n      'csrrci',\n      //        b) Change Level\n      'ecall',\n      'ebreak',\n      'eret',\n      //        c) Trap Redirect\n      'mrts',\n      'mrth',\n      'hrts',\n\n      // Part 3) Optional Multiply-Divide Instruction Extension: RVM\n      //        a) Multiply\n      //          I) RV32M\n      'mul',\n      'mulh',\n      'mulhsu',\n      //          II) RV64M and RV128M\n      'mulw',\n      'muld',\n      //        b) Divide\n      //          I) RV32M\n      'div',\n      'divu',\n      //          II) RV64M and RV128M\n      'divw',\n      'divd',\n      //        c) Remainder\n      //          I) RV32M\n      'rem',\n      'remu',\n      //          II) RV64M and RV128M\n      'remw',\n      'remuw',\n      'remd',\n      'remud',\n\n      // Part 4) Pseudo Instructions\n      //        a) Standard Psuedo Instructions\n      'beqz',\n      'bgez',\n      'bgt',\n      'bgtu',\n      'bgtz',\n      'ble',\n      'bleu',\n      'blez',\n      'bltz',\n      'bnez',\n      'call',\n      'j',\n      'jr',\n      'la',\n      'li',\n      'mv',\n      'neg',\n      'nop',\n      'ret',\n      'not',\n      'ret',\n      'seqz',\n      'sgtz',\n      'sltz',\n      'snez',\n      'tail',\n      //        b) Non-Standard Psuedo Instructions\n      'seq',\n      'sge',\n      'sgeu',\n      'sgt',\n      'sgtu',\n      'sle',\n      'sleu',\n      'sne',\n      // Part 5) Optional Compressed (16-bit) Instruction Extension: RVC\n      //        a) Loads\n      'c.lw',\n      'c.lwsp',\n      'c.ld',\n      'c.ldsp',\n      'c.lq',\n      'c.lqsp',\n      //        b) Stores\n      'c.sw',\n      'c.swsp',\n      'c.sd',\n      'c.sdsp',\n      'c.sq',\n      'c.sqsp',\n      //        c) Arithmetic\n      'c.add',\n      'c.addw',\n      'c.addi',\n      'c.addiw',\n      'c.addi16sp',\n      'c.addi2spn',\n      'c.li',\n      'c.lui',\n      'c.mv',\n      'c.sub',\n      //        d) Shifts\n      'c.slli',\n      //        e) Branches\n      'c.beqz',\n      'c.bnez',\n      //        f) Jump\n      'c.j',\n      'c.jr',\n      //        g) Jump & Link\n      'c.jal',\n      'c.jalr',\n      //        h) System\n      'c.ebreak',\n      // Part 6) Optional Atomic Instruction Extrnsion: RVA\n      //        a) Load\n      //          I) RV32A\n      'lr.w',\n      //          II) RV64A and RV128A\n      'lr.d',\n      'lr.q',\n      //        b) Store\n      //          I) RV32A\n      'sc.w',\n      //          II) RV64A and RV128A\n      'sc.d',\n      'sc.q',\n      //        c) Swap\n      //          I) RV32A\n      'amoswap.w',\n      //          II) RV64A and RV128A\n      'amoswap.d',\n      'amoswap.q',\n      //        d) Add\n      //          I) RV32A\n      'amoadd.w',\n      //          II) RV64A and RV128A\n      'amoadd.d',\n      'amoadd.q',\n      //        e) Logical\n      //          I) RV32A\n      'amoxor.w',\n      'amoand.w',\n      'amoor.w',\n      //          II) RV64A and RV128A\n      'amoxor.d',\n      'amoand.d',\n      'amoor.d',\n      'amoxor.q',\n      'amoand.q',\n      'amoor.q',\n      //        f) Min\\Max\n      //          I) RV32A\n      'amomin.w',\n      'amomax.w',\n      'amominu.w',\n      'amomax.w',\n      //          II) RV64A and RV128A\n      'amomin.d',\n      'amomax.d',\n      'amominu.d',\n      'amomax.d',\n      'amomin.q',\n      'amomax.q',\n      'amominu.q',\n      'amomax.q',\n      // Part 7) Optional Floating-Point Instruction Extension: RVF, RVD, & RVQ\n      //        a) Move\n      //          I) RV32-\n      'fmv.h.x',\n      'fmv.s.s',\n      'fmv.x.h',\n      'fmv.x.s',\n      //          II) RV64- and RV128-\n      'fmv.d.x',\n      'fmv.q.s',\n      'fmv.d.h',\n      'fmv.q.s',\n      //        b) Convert\n      //          I) RV32-\n      'fcvt.h.w',\n      'fcvt.s.w',\n      'fcvt.d.w',\n      'fcvt.q.w',\n      'fcvt.h.wu',\n      'fcvt.s.wu',\n      'fcvt.d.wu',\n      'fcvt.q.wu',\n      'fcvt.w.h',\n      'fcvt.w.s',\n      'fcvt.w.d',\n      'fcvt.w.q',\n      'fcvt.wu.h',\n      'fcvt.w.s',\n      'fcvt.w.d',\n      'fcvt.w.q',\n      //          II) RV64- and RV128-\n      'fcvt.h.l',\n      'fcvt.h.t',\n      'fcvt.h.lu',\n      'fcvt.h.tu',\n      'fcvt.s.l',\n      'fcvt.s.t',\n      'fcvt.s.lu',\n      'fcvt.s.tu',\n      'fcvt.d.l',\n      'fcvt.d.t',\n      'fcvt.d.lu',\n      'fcvt.d.tu',\n      'fcvt.q.l',\n      'fcvt.q.t',\n      'fcvt.q.lu',\n      'fcvt.q.tu',\n      'fcvt.l.h',\n      'fcvt.t.h',\n      'fcvt.lu.h',\n      'fcvt.tu.h',\n      'fcvt.l.s',\n      'fcvt.t.s',\n      'fcvt.lu.s',\n      'fcvt.tu.s',\n      'fcvt.l.d',\n      'fcvt.t.d',\n      'fcvt.lu.d',\n      'fcvt.tu.d',\n      'fcvt.l.q',\n      'fcvt.t.q',\n      'fcvt.lu.q',\n      'fcvt.tu.q',\n      //        c) Load\n      'flw',\n      'fld',\n      'flq',\n      //        d) Store\n      'fsw',\n      'fsd',\n      'fsq',\n      //        e) Arithmetic\n      'fadd.s',\n      'fsub.s',\n      'fmul.s',\n      'fdiv.s',\n      'fsqrt.s',\n      'fadd.d',\n      'fsub.d',\n      'fmul.d',\n      'fdiv.d',\n      'fsqrt.d',\n      'fadd.q',\n      'fsub.q',\n      'fmul.q',\n      'fdiv.q',\n      'fsqrt.q',\n      //        f) Mul-Add\n      'fmadd.d',\n      'fmsub.d',\n      'fnmsub.d',\n      'fnmadd.d',\n      'fmadd.d',\n      'fmsub.d',\n      'fnmsub.d',\n      'fnmadd.d',\n      'fmadd.q',\n      'fmsub.q',\n      'fnmsub.q',\n      'fnmadd.q',\n      //        g) Sign Inject\n      'fsgnj.s',\n      'fsgnjn.s',\n      'fsgnjx.s',\n      'fsgnj.d',\n      'fsgnjn.d',\n      'fsgnjx.d',\n      'fsgnj.q',\n      'fsgnjn.q',\n      'fsgnjx.q',\n      //        h) Min/Max\n      'fmin.s',\n      'fmax.s',\n      'fmin.d',\n      'fmax.d',\n      'fmin.q',\n      'fmax.q',\n      //        i) Compare\n      'feq.s',\n      'flt.s',\n      'fle.s',\n      'feq.d',\n      'flt.d',\n      'fle.d',\n      'feq.q',\n      'flt.q',\n      'fle.q',\n      //        j) Categorization\n      'fclass.s',\n      'fclass.d',\n      'fclass.q',\n      //        k) Configuration\n      'frcsr',\n      'frrm',\n      'frflags',\n      'fscsr',\n      'fsrm',\n      'fsflags',\n      'fsrmi',\n      'fsflagsi'\n    ],\n    'i'\n  )\n\n  // Registers\n  // Part 1) Actual Register Values\n  // Part 2) Application Binary Interface\n  var registers = regexFromWords(\n    [\n      // Part 1) Actual Register Values\n      'x0',\n      'x1',\n      'x2',\n      'x3',\n      'x4',\n      'x5',\n      'x6',\n      'x7',\n      'x8',\n      'x9',\n      'x10',\n      'x11',\n      'x12',\n      'x13',\n      'x14',\n      'x15',\n      'x16',\n      'x17',\n      'x18',\n      'x19',\n      'x20',\n      'x21',\n      'x22',\n      'x23',\n      'x24',\n      'x25',\n      'x26',\n      'x27',\n      'x28',\n      'x29',\n      'x30',\n      'x31',\n\n      // Part 2) Application Binary Interface\n      'zero',\n      'ra',\n      'sp',\n      'gp',\n      'tp',\n      't0',\n      't1',\n      't2',\n      's0',\n      's1',\n      'a0',\n      'a1',\n      'a2',\n      'a3',\n      'a4',\n      'a5',\n      'a6',\n      'a7',\n      's2',\n      's3',\n      's4',\n      's5',\n      's6',\n      's7',\n      's8',\n      's9',\n      's10',\n      's11',\n      't3',\n      't4',\n      't5',\n      't6',\n      'pc'\n    ],\n    ''\n  )\n\n  // Keywords\n  // Part 1) Pseudo Operations\n  var keywords = regexFromWords(\n    [\n      // Part 1) Pseudo Operations\n      '.align',\n      '.file',\n      '.globl',\n      '.local',\n      '.comm',\n      '.common',\n      '.ident',\n      '.section',\n      '.size',\n      '.text',\n      '.data',\n      '.rodata',\n      '.bss',\n      '.string',\n      '.asciz',\n      '.asciiz',\n      '.equ',\n      '.macro',\n      '.endm',\n      '.type',\n      '.option',\n      '.byte',\n      '.2byte',\n      '.half',\n      '.short',\n      '.4byte',\n      '.word',\n      '.long',\n      '.8byte',\n      '.dword',\n      '.quad',\n      '.dtprelword',\n      '.dtpreldword',\n      '.sleb128',\n      '.uleb128',\n      '.p2align',\n      '.balign',\n      '.zero',\n      '.float',\n      '.double'\n    ],\n    'i'\n  )\n\n  function normal(stream, state) {\n    var ch = stream.next()\n\n    if (ch == '#') {\n      stream.skipToEnd()\n\n      return 'comment'\n    }\n\n    if (ch == '\"' || ch == \"'\") {\n      state.cur = string(ch)\n\n      return state.cur(stream, state)\n    }\n\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w.%]/)\n\n      // Handle numeric labels\n      if (stream.peek() === ':') {\n        return 'variable'\n      }\n\n      return 'number'\n    }\n\n    if (/[.\\w_]/.test(ch)) {\n      stream.eatWhile(/[\\w\\\\\\-_.]/)\n\n      return 'variable'\n    }\n\n    return null\n  }\n\n  function string(quote) {\n    return function(stream, state) {\n      var escaped = false,\n        ch\n\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) break\n\n        escaped = !escaped && ch == '\\\\'\n      }\n      if (!escaped) state.cur = normal\n\n      return 'string'\n    }\n  }\n\n  return {\n    startState: function(basecol) {\n      return { basecol: basecol || 0, indentDepth: 0, cur: normal }\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null\n\n      var style = state.cur(stream, state)\n\n      var word = stream.current()\n\n      if (style == 'variable') {\n        if (keywords.test(word)) style = 'keyword'\n        else if (instructions.test(word)) style = 'builtin'\n        else if (registers.test(word)) style = 'variable-2'\n      }\n      return style\n    }\n  }\n})\n\nCodeMirror.defineMIME('text/riscv', 'riscv')\n"]},"metadata":{},"sourceType":"module"}