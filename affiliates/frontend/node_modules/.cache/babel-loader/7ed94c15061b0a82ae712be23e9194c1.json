{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport isEqual from 'fast-deep-equal';\nimport youTubePlayer from 'youtube-player';\n/**\r\n * Check whether a `props` change should result in the video being updated.\r\n *\r\n * @param {Object} prevProps\r\n * @param {Object} props\r\n */\n\nfunction shouldUpdateVideo(prevProps, props) {\n  // A changing video should always trigger an update\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  } // Otherwise, a change in the start/end time playerVars also requires a player\n  // update.\n\n\n  var prevVars = prevProps.opts.playerVars || {};\n  var vars = props.opts.playerVars || {};\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\n/**\r\n * Neutralise API options that only require a video update, leaving only options\r\n * that require a player reset. The results can then be compared to see if a\r\n * player reset is necessary.\r\n *\r\n * @param {Object} opts\r\n */\n\n\nfunction filterResetOptions(opts) {\n  return _extends({}, opts, {\n    playerVars: _extends({}, opts.playerVars, {\n      autoplay: 0,\n      start: 0,\n      end: 0\n    })\n  });\n}\n/**\r\n * Check whether a `props` change should result in the player being reset.\r\n * The player is reset when the `props.opts` change, except if the only change\r\n * is in the `start` and `end` playerVars, because a video update can deal with\r\n * those.\r\n *\r\n * @param {Object} prevProps\r\n * @param {Object} props\r\n */\n\n\nfunction shouldResetPlayer(prevProps, props) {\n  return !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts));\n}\n/**\r\n * Check whether a props change should result in an id or className update.\r\n *\r\n * @param {Object} prevProps\r\n * @param {Object} props\r\n */\n\n\nfunction shouldUpdatePlayer(prevProps, props) {\n  return prevProps.id !== props.id || prevProps.className !== props.className;\n}\n\nvar YouTube = function (_React$Component) {\n  _inherits(YouTube, _React$Component);\n\n  function YouTube(props) {\n    _classCallCheck(this, YouTube);\n\n    var _this = _possibleConstructorReturn(this, (YouTube.__proto__ || Object.getPrototypeOf(YouTube)).call(this, props));\n\n    _this.onPlayerReady = function (event) {\n      return _this.props.onReady(event);\n    };\n\n    _this.onPlayerError = function (event) {\n      return _this.props.onError(event);\n    };\n\n    _this.onPlayerStateChange = function (event) {\n      _this.props.onStateChange(event);\n\n      switch (event.data) {\n        case YouTube.PlayerState.ENDED:\n          _this.props.onEnd(event);\n\n          break;\n\n        case YouTube.PlayerState.PLAYING:\n          _this.props.onPlay(event);\n\n          break;\n\n        case YouTube.PlayerState.PAUSED:\n          _this.props.onPause(event);\n\n          break;\n\n        default:\n      }\n    };\n\n    _this.onPlayerPlaybackRateChange = function (event) {\n      return _this.props.onPlaybackRateChange(event);\n    };\n\n    _this.onPlayerPlaybackQualityChange = function (event) {\n      return _this.props.onPlaybackQualityChange(event);\n    };\n\n    _this.createPlayer = function () {\n      // do not attempt to create a player server-side, it won't work\n      if (typeof document === 'undefined') return; // create player\n\n      var playerOpts = _extends({}, _this.props.opts, {\n        // preload the `videoId` video if one is already given\n        videoId: _this.props.videoId\n      });\n\n      _this.internalPlayer = youTubePlayer(_this.container, playerOpts); // attach event handlers\n\n      _this.internalPlayer.on('ready', _this.onPlayerReady);\n\n      _this.internalPlayer.on('error', _this.onPlayerError);\n\n      _this.internalPlayer.on('stateChange', _this.onPlayerStateChange);\n\n      _this.internalPlayer.on('playbackRateChange', _this.onPlayerPlaybackRateChange);\n\n      _this.internalPlayer.on('playbackQualityChange', _this.onPlayerPlaybackQualityChange);\n    };\n\n    _this.resetPlayer = function () {\n      return _this.internalPlayer.destroy().then(_this.createPlayer);\n    };\n\n    _this.updatePlayer = function () {\n      _this.internalPlayer.getIframe().then(function (iframe) {\n        if (_this.props.id) iframe.setAttribute('id', _this.props.id);else iframe.removeAttribute('id');\n        if (_this.props.className) iframe.setAttribute('class', _this.props.className);else iframe.removeAttribute('class');\n      });\n    };\n\n    _this.updateVideo = function () {\n      if (typeof _this.props.videoId === 'undefined' || _this.props.videoId === null) {\n        _this.internalPlayer.stopVideo();\n\n        return;\n      } // set queueing options\n\n\n      var autoplay = false;\n      var opts = {\n        videoId: _this.props.videoId\n      };\n\n      if ('playerVars' in _this.props.opts) {\n        autoplay = _this.props.opts.playerVars.autoplay === 1;\n\n        if ('start' in _this.props.opts.playerVars) {\n          opts.startSeconds = _this.props.opts.playerVars.start;\n        }\n\n        if ('end' in _this.props.opts.playerVars) {\n          opts.endSeconds = _this.props.opts.playerVars.end;\n        }\n      } // if autoplay is enabled loadVideoById\n\n\n      if (autoplay) {\n        _this.internalPlayer.loadVideoById(opts);\n\n        return;\n      } // default behaviour just cues the video\n\n\n      _this.internalPlayer.cueVideoById(opts);\n    };\n\n    _this.refContainer = function (container) {\n      _this.container = container;\n    };\n\n    _this.container = null;\n    _this.internalPlayer = null;\n    return _this;\n  }\n  /**\r\n    * Expose PlayerState constants for convenience. These constants can also be\r\n    * accessed through the global YT object after the YouTube IFrame API is instantiated.\r\n    * https://developers.google.com/youtube/iframe_api_reference#onStateChange\r\n    */\n\n\n  _createClass(YouTube, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.createPlayer();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (shouldUpdatePlayer(prevProps, this.props)) {\n        this.updatePlayer();\n      }\n\n      if (shouldResetPlayer(prevProps, this.props)) {\n        this.resetPlayer();\n      }\n\n      if (shouldUpdateVideo(prevProps, this.props)) {\n        this.updateVideo();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      /**\r\n       * Note: The `youtube-player` package that is used promisifies all Youtube\r\n       * Player API calls, which introduces a delay of a tick before it actually\r\n       * gets destroyed. Since React attempts to remove the element instantly\r\n       * this method isn't quick enough to reset the container element.\r\n       */\n      this.internalPlayer.destroy();\n    }\n    /**\r\n     * https://developers.google.com/youtube/iframe_api_reference#onReady\r\n     *\r\n     * @param {Object} event\r\n     *   @param {Object} target - player object\r\n     */\n\n    /**\r\n     * https://developers.google.com/youtube/iframe_api_reference#onError\r\n     *\r\n     * @param {Object} event\r\n     *   @param {Integer} data  - error type\r\n     *   @param {Object} target - player object\r\n     */\n\n    /**\r\n     * https://developers.google.com/youtube/iframe_api_reference#onStateChange\r\n     *\r\n     * @param {Object} event\r\n     *   @param {Integer} data  - status change type\r\n     *   @param {Object} target - actual YT player\r\n     */\n\n    /**\r\n     * https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange\r\n     *\r\n     * @param {Object} event\r\n     *   @param {Float} data    - playback rate\r\n     *   @param {Object} target - actual YT player\r\n     */\n\n    /**\r\n     * https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange\r\n     *\r\n     * @param {Object} event\r\n     *   @param {String} data   - playback quality\r\n     *   @param {Object} target - actual YT player\r\n     */\n\n    /**\r\n     * Initialize the Youtube Player API on the container and attach event handlers\r\n     */\n\n    /**\r\n     * Shorthand for destroying and then re-creating the Youtube Player\r\n     */\n\n    /**\r\n     * Method to update the id and class of the Youtube Player iframe.\r\n     * React should update this automatically but since the Youtube Player API\r\n     * replaced the DIV that is mounted by React we need to do this manually.\r\n     */\n\n    /**\r\n     * Call Youtube Player API methods to update the currently playing video.\r\n     * Depeding on the `opts.playerVars.autoplay` this function uses one of two\r\n     * Youtube Player API methods to update the video.\r\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        className: this.props.containerClassName\n      }, React.createElement('div', {\n        id: this.props.id,\n        className: this.props.className,\n        ref: this.refContainer\n      }));\n    }\n  }]);\n\n  return YouTube;\n}(React.Component);\n\nYouTube.propTypes = {\n  videoId: PropTypes.string,\n  // custom ID for player element\n  id: PropTypes.string,\n  // custom class name for player element\n  className: PropTypes.string,\n  // custom class name for player container element\n  containerClassName: PropTypes.string,\n  // https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player\n  opts: PropTypes.objectOf(PropTypes.any),\n  // event subscriptions\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func\n};\nYouTube.defaultProps = {\n  id: null,\n  className: null,\n  opts: {},\n  containerClassName: '',\n  onReady: function onReady() {},\n  onError: function onError() {},\n  onPlay: function onPlay() {},\n  onPause: function onPause() {},\n  onEnd: function onEnd() {},\n  onStateChange: function onStateChange() {},\n  onPlaybackRateChange: function onPlaybackRateChange() {},\n  onPlaybackQualityChange: function onPlaybackQualityChange() {}\n};\nYouTube.PlayerState = {\n  UNSTARTED: -1,\n  ENDED: 0,\n  PLAYING: 1,\n  PAUSED: 2,\n  BUFFERING: 3,\n  CUED: 5\n};\nexport default YouTube;","map":null,"metadata":{},"sourceType":"module"}