{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"groovy\", function (config) {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = words(\"abstract as assert boolean break byte case catch char class const continue def default \" + \"do double else enum extends final finally float for goto if implements import in \" + \"instanceof int interface long native new package private protected public return \" + \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" + \"try void volatile while\");\n    var blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\n    var standaloneKeywords = words(\"return break continue\");\n    var atoms = words(\"null true false this\");\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        return startString(ch, stream, state);\n      }\n\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n\n        if (stream.eat(/eE/)) {\n          stream.eat(/\\+\\-/);\n          stream.eatWhile(/\\d/);\n        }\n\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize.push(tokenComment);\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        if (expectExpression(state.lastToken, false)) {\n          return startString(ch, stream, state);\n        }\n      }\n\n      if (ch == \"-\" && stream.eat(\">\")) {\n        curPunc = \"->\";\n        return null;\n      }\n\n      if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n        stream.eatWhile(/[+\\-*&%=<>|~]/);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n\n      if (ch == \"@\") {\n        stream.eatWhile(/[\\w\\$_\\.]/);\n        return \"meta\";\n      }\n\n      if (state.lastToken == \".\") return \"property\";\n\n      if (stream.eat(\":\")) {\n        curPunc = \"proplabel\";\n        return \"property\";\n      }\n\n      var cur = stream.current();\n\n      if (atoms.propertyIsEnumerable(cur)) {\n        return \"atom\";\n      }\n\n      if (keywords.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n        return \"keyword\";\n      }\n\n      return \"variable\";\n    }\n\n    tokenBase.isBase = true;\n\n    function startString(quote, stream, state) {\n      var tripleQuoted = false;\n\n      if (quote != \"/\" && stream.eat(quote)) {\n        if (stream.eat(quote)) tripleQuoted = true;else return \"string\";\n      }\n\n      function t(stream, state) {\n        var escaped = false,\n            next,\n            end = !tripleQuoted;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            if (!tripleQuoted) {\n              break;\n            }\n\n            if (stream.match(quote + quote)) {\n              end = true;\n              break;\n            }\n          }\n\n          if (quote == '\"' && next == \"$\" && !escaped && stream.eat(\"{\")) {\n            state.tokenize.push(tokenBaseUntilBrace());\n            return \"string\";\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize.pop();\n        return \"string\";\n      }\n\n      state.tokenize.push(t);\n      return t(stream, state);\n    }\n\n    function tokenBaseUntilBrace() {\n      var depth = 1;\n\n      function t(stream, state) {\n        if (stream.peek() == \"}\") {\n          depth--;\n\n          if (depth == 0) {\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          }\n        } else if (stream.peek() == \"{\") {\n          depth++;\n        }\n\n        return tokenBase(stream, state);\n      }\n\n      t.isBase = true;\n      return t;\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize.pop();\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function expectExpression(last, newline) {\n      return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) || last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" || last == \"standalone\" && !newline;\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: [tokenBase],\n          context: new Context((basecolumn || 0) - config.indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true,\n          lastToken: null\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true; // Automatic semicolon insertion\n\n          if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n            popContext(state);\n            ctx = state.context;\n          }\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = state.tokenize[state.tokenize.length - 1](stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state); // Handle indentation for {x -> \\n ... }\n        else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n            popContext(state);\n            state.context.align = false;\n          } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n            while (ctx.type == \"statement\") {\n              ctx = popContext(state);\n            }\n\n            if (ctx.type == \"}\") ctx = popContext(state);\n\n            while (ctx.type == \"statement\") {\n              ctx = popContext(state);\n            }\n          } else if (curPunc == ctx.type) popContext(state);else if (ctx.type == \"}\" || ctx.type == \"top\" || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        state.lastToken = curPunc || style;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (!state.tokenize[state.tokenize.length - 1].isBase) return CodeMirror.Pass;\n        var firstChar = textAfter && textAfter.charAt(0),\n            ctx = state.context;\n        if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n        var closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : config.indentUnit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : config.indentUnit);\n      },\n      electricChars: \"{}\",\n      closeBrackets: {\n        triples: \"'\\\"\"\n      },\n      fold: \"brace\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-groovy\", \"groovy\");\n});","map":null,"metadata":{},"sourceType":"script"}