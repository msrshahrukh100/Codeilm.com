{"ast":null,"code":"import _regeneratorRuntime from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport morph from 'morphmorph';\nimport omitBy from 'lodash.omitby';\nimport { unescape } from 'escape-goat';\nvar SETTINGS_KEY = 'CARBON_STATE';\nvar PRESETS_KEY = 'CARBON_PRESETS';\nvar THEMES_KEY = 'CARBON_THEMES';\n\nvar createAssigner = function createAssigner(key) {\n  var assign = morph.assign(key);\n  return function (window, v) {\n    return assign(window, JSON.stringify(v));\n  };\n};\n\nexport var saveSettings = createAssigner(SETTINGS_KEY);\nexport var savePresets = createAssigner(PRESETS_KEY);\nexport var saveThemes = createAssigner(THEMES_KEY);\n\nvar parse = function parse(v) {\n  try {\n    return JSON.parse(v);\n  } catch (e) {// pass\n  }\n};\n\nexport var toggle = function toggle(stateField) {\n  return function (state) {\n    return _defineProperty({}, stateField, !state[stateField]);\n  };\n}; // https://gist.github.com/alexgibson/1704515\n// TODO use https://github.com/sindresorhus/escape-goat/\n\nexport var escapeHtml = function escapeHtml(s) {\n  if (typeof s === 'string') {\n    return s.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\//g, '&#x2F;');\n  }\n};\nexport var unescapeHtml = function unescapeHtml(s) {\n  if (typeof s === 'string') {\n    return unescape(s).replace(/&#x2F;/g, '/');\n  }\n};\nexport var getSettings = morph.compose(parse, escapeHtml, morph.get(SETTINGS_KEY));\nexport var getPresets = morph.compose(parse, morph.get(PRESETS_KEY));\nexport var getThemes = morph.compose(parse, morph.get(THEMES_KEY));\nexport var clearSettings = function clearSettings() {\n  return localStorage.removeItem(SETTINGS_KEY);\n};\nexport var fileToDataURL = function fileToDataURL(blob) {\n  return new Promise(function (res) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      return res(e.target.result);\n    };\n\n    reader.readAsDataURL(blob);\n  });\n};\nexport var formatCode =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(code) {\n    var prettier, babylonParser;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return import('prettier/standalone');\n\n          case 2:\n            prettier = _context.sent;\n            _context.next = 5;\n            return import('prettier/parser-babylon');\n\n          case 5:\n            babylonParser = _context.sent;\n            return _context.abrupt(\"return\", prettier.format(code, {\n              parser: 'babylon',\n              plugins: [babylonParser],\n              semi: false,\n              singleQuote: true\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function formatCode(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var omit = function omit(object, keys) {\n  return omitBy(object, function (_, k) {\n    return keys.indexOf(k) > -1;\n  });\n};\nexport var stringifyRGBA = function stringifyRGBA(obj) {\n  return \"rgba(\".concat(obj.r, \",\").concat(obj.g, \",\").concat(obj.b, \",\").concat(obj.a, \")\");\n};\nexport var capitalize = function capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\nexport var generateId = function generateId() {\n  return Math.random().toString(36).slice(2);\n};","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/src/components/CarbonCode/lib/util.js"],"names":["morph","omitBy","unescape","SETTINGS_KEY","PRESETS_KEY","THEMES_KEY","createAssigner","key","assign","window","v","JSON","stringify","saveSettings","savePresets","saveThemes","parse","e","toggle","stateField","state","escapeHtml","s","replace","unescapeHtml","getSettings","compose","get","getPresets","getThemes","clearSettings","localStorage","removeItem","fileToDataURL","blob","Promise","res","reader","FileReader","onload","target","result","readAsDataURL","formatCode","code","prettier","babylonParser","format","parser","plugins","semi","singleQuote","omit","object","keys","_","k","indexOf","stringifyRGBA","obj","r","g","b","a","capitalize","charAt","toUpperCase","slice","generateId","Math","random","toString"],"mappings":"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","sourcesContent":["import morph from 'morphmorph'\nimport omitBy from 'lodash.omitby'\nimport { unescape } from 'escape-goat'\n\nconst SETTINGS_KEY = 'CARBON_STATE'\nconst PRESETS_KEY = 'CARBON_PRESETS'\nconst THEMES_KEY = 'CARBON_THEMES'\n\nconst createAssigner = key => {\n  const assign = morph.assign(key)\n\n  return (window, v) => assign(window, JSON.stringify(v))\n}\n\nexport const saveSettings = createAssigner(SETTINGS_KEY)\nexport const savePresets = createAssigner(PRESETS_KEY)\nexport const saveThemes = createAssigner(THEMES_KEY)\n\nconst parse = v => {\n  try {\n    return JSON.parse(v)\n  } catch (e) {\n    // pass\n  }\n}\n\nexport const toggle = stateField => state => ({ [stateField]: !state[stateField] })\n\n// https://gist.github.com/alexgibson/1704515\n// TODO use https://github.com/sindresorhus/escape-goat/\nexport const escapeHtml = s => {\n  if (typeof s === 'string') {\n    return s\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\\//g, '&#x2F;')\n  }\n}\n\nexport const unescapeHtml = s => {\n  if (typeof s === 'string') {\n    return unescape(s).replace(/&#x2F;/g, '/')\n  }\n}\n\nexport const getSettings = morph.compose(\n  parse,\n  escapeHtml,\n  morph.get(SETTINGS_KEY)\n)\n\nexport const getPresets = morph.compose(\n  parse,\n  morph.get(PRESETS_KEY)\n)\n\nexport const getThemes = morph.compose(\n  parse,\n  morph.get(THEMES_KEY)\n)\n\nexport const clearSettings = () => localStorage.removeItem(SETTINGS_KEY)\n\nexport const fileToDataURL = blob =>\n  new Promise(res => {\n    const reader = new FileReader()\n    reader.onload = e => res(e.target.result)\n    reader.readAsDataURL(blob)\n  })\n\nexport const formatCode = async code => {\n  const prettier = await import('prettier/standalone')\n  const babylonParser = await import('prettier/parser-babylon')\n\n  return prettier.format(code, {\n    parser: 'babylon',\n    plugins: [babylonParser],\n    semi: false,\n    singleQuote: true\n  })\n}\n\nexport const omit = (object, keys) => omitBy(object, (_, k) => keys.indexOf(k) > -1)\n\nexport const stringifyRGBA = obj => `rgba(${obj.r},${obj.g},${obj.b},${obj.a})`\n\nexport const capitalize = s => s.charAt(0).toUpperCase() + s.slice(1)\n\nexport const generateId = () =>\n  Math.random()\n    .toString(36)\n    .slice(2)\n"]},"metadata":{},"sourceType":"module"}