{"ast":null,"code":"import _regeneratorRuntime from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport debounce from 'lodash.debounce';\nimport ms from 'ms';\nimport { fileToDataURL } from './util';\nvar client = axios.create({\n  baseURL: \"\".concat(process.env.API_URL || process.env.NODE_ENV === 'production' ? '' : 'http://localhost:4000', \"/api\")\n});\nvar RATE_LIMIT_CODE = 420;\nvar gistClient = axios.create({\n  baseURL: 'https://api.github.com',\n  timeout: 5000,\n  headers: {\n    Accept: 'application/vnd.github.v3+json',\n    'Content-Type': 'application/json'\n  }\n});\n\nfunction tweet(content, encodedImage) {\n  var processedData = encodedImage.split(',')[1];\n  return client.post('/twitter', {\n    imageData: processedData,\n    altText: content\n  }).then(function (res) {\n    return res.data.url;\n  }).then(function (url) {\n    return encodeURIComponent(\"Built with #Carbon, by @dawn_labs \".concat(url));\n  }).then(function (uri) {\n    return \"https://twitter.com/intent/tweet?text=\".concat(uri);\n  }).then(openTwitterUrl).catch(checkIfRateLimited);\n}\n\nfunction image(state) {\n  return client.post('/image', {\n    state: state\n  }).then(function (res) {\n    return res.data;\n  });\n} // ~ makes the file come later alphabetically, which is how gists are sorted\n\n\nvar CARBON_STORAGE_KEY = '~carbon.json';\n\nfunction getGist(uid) {\n  return gistClient.get(\"/gists/\".concat(uid)).then(function (res) {\n    return res.data;\n  }).then(function (_ref) {\n    var owner = _ref.owner,\n        files = _ref.files;\n    var config;\n\n    if (files[CARBON_STORAGE_KEY]) {\n      try {\n        config = JSON.parse(files[CARBON_STORAGE_KEY].content);\n      } catch (error) {// pass\n      }\n    }\n\n    var otherFiles = Object.keys(files).filter(function (key) {\n      return key !== CARBON_STORAGE_KEY;\n    });\n    var snippet = files[otherFiles[0]];\n    return {\n      code: snippet.content,\n      language: snippet.language,\n      owner: owner,\n      config: config\n    };\n  });\n} // private\n\n\nfunction openTwitterUrl(twitterUrl) {\n  var width = 575;\n  var height = 400;\n  var left = (window.outerWidth - width) / 2;\n  var top = (window.outerHeight - height) / 2;\n  var opts = \"status=1,width=\".concat(width, \",height=\").concat(height, \",top=\").concat(top, \",left=\").concat(left);\n  window.open(twitterUrl, 'twitter', opts);\n}\n\nfunction checkIfRateLimited(err) {\n  if (err.response.status === RATE_LIMIT_CODE) {\n    alert(\"Oh no! Looks like to many people are trying to tweet right now and we've been rate limited. Try again soon or save and upload manually!\");\n    return;\n  }\n\n  throw err;\n}\n\nvar downloadThumbnailImage = function downloadThumbnailImage(img) {\n  return client.get(img.url.replace('http://', 'https://'), {\n    responseType: 'blob'\n  }).then(function (res) {\n    return res.data;\n  }).then(fileToDataURL).then(function (dataURL) {\n    return Object.assign(img, {\n      dataURL: dataURL\n    });\n  });\n};\n\nvar unsplash = {\n  download: function download(id) {\n    return client.get(\"/unsplash/download/\".concat(id)).then(function (res) {\n      return res.data.url;\n    }).then(function (url) {\n      return client.get(url, {\n        responseType: 'blob'\n      });\n    }).then(function (res) {\n      return res.data;\n    });\n  },\n  random: function () {\n    var _random = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var imageUrls;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.get('/unsplash/random');\n\n            case 2:\n              imageUrls = _context.sent;\n              return _context.abrupt(\"return\", Promise.all(imageUrls.data.map(downloadThumbnailImage)));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function random() {\n      return _random.apply(this, arguments);\n    }\n\n    return random;\n  }()\n};\nexport default {\n  gist: {\n    get: getGist\n  },\n  tweet: debounce(tweet, ms('5s'), {\n    leading: true,\n    trailing: false\n  }),\n  image: debounce(image, ms('5s'), {\n    leading: true,\n    trailing: false\n  }),\n  unsplash: unsplash,\n  downloadThumbnailImage: downloadThumbnailImage\n};","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/affiliates/frontend/src/components/CarbonCode/lib/api.js"],"names":["axios","debounce","ms","fileToDataURL","client","create","baseURL","process","env","API_URL","NODE_ENV","RATE_LIMIT_CODE","gistClient","timeout","headers","Accept","tweet","content","encodedImage","processedData","split","post","imageData","altText","then","res","data","url","encodeURIComponent","uri","openTwitterUrl","catch","checkIfRateLimited","image","state","CARBON_STORAGE_KEY","getGist","uid","get","owner","files","config","JSON","parse","error","otherFiles","Object","keys","filter","key","snippet","code","language","twitterUrl","width","height","left","window","outerWidth","top","outerHeight","opts","open","err","response","status","alert","downloadThumbnailImage","img","replace","responseType","dataURL","assign","unsplash","download","id","random","imageUrls","Promise","all","map","gist","leading","trailing"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport debounce from 'lodash.debounce'\nimport ms from 'ms'\n\nimport { fileToDataURL } from './util'\n\nconst client = axios.create({\n  baseURL: `${\n    process.env.API_URL || process.env.NODE_ENV === 'production' ? '' : 'http://localhost:4000'\n  }/api`\n})\n\nconst RATE_LIMIT_CODE = 420\n\nconst gistClient = axios.create({\n  baseURL: 'https://api.github.com',\n  timeout: 5000,\n  headers: {\n    Accept: 'application/vnd.github.v3+json',\n    'Content-Type': 'application/json'\n  }\n})\n\nfunction tweet(content, encodedImage) {\n  const processedData = encodedImage.split(',')[1]\n\n  return client\n    .post('/twitter', {\n      imageData: processedData,\n      altText: content\n    })\n    .then(res => res.data.url)\n    .then(url => encodeURIComponent(`Built with #Carbon, by @dawn_labs ${url}`))\n    .then(uri => `https://twitter.com/intent/tweet?text=${uri}`)\n    .then(openTwitterUrl)\n    .catch(checkIfRateLimited)\n}\n\nfunction image(state) {\n  return client.post('/image', { state }).then(res => res.data)\n}\n\n// ~ makes the file come later alphabetically, which is how gists are sorted\nconst CARBON_STORAGE_KEY = '~carbon.json'\nfunction getGist(uid) {\n  return gistClient\n    .get(`/gists/${uid}`)\n    .then(res => res.data)\n    .then(({ owner, files }) => {\n      let config\n      if (files[CARBON_STORAGE_KEY]) {\n        try {\n          config = JSON.parse(files[CARBON_STORAGE_KEY].content)\n        } catch (error) {\n          // pass\n        }\n      }\n\n      const otherFiles = Object.keys(files).filter(key => key !== CARBON_STORAGE_KEY)\n\n      const snippet = files[otherFiles[0]]\n\n      return {\n        code: snippet.content,\n        language: snippet.language,\n        owner,\n        config\n      }\n    })\n}\n\n// private\nfunction openTwitterUrl(twitterUrl) {\n  const width = 575\n  const height = 400\n  const left = (window.outerWidth - width) / 2\n  const top = (window.outerHeight - height) / 2\n  const opts = `status=1,width=${width},height=${height},top=${top},left=${left}`\n\n  window.open(twitterUrl, 'twitter', opts)\n}\n\nfunction checkIfRateLimited(err) {\n  if (err.response.status === RATE_LIMIT_CODE) {\n    alert(\n      \"Oh no! Looks like to many people are trying to tweet right now and we've been rate limited. Try again soon or save and upload manually!\"\n    )\n    return\n  }\n\n  throw err\n}\n\nconst downloadThumbnailImage = img => {\n  return client\n    .get(img.url.replace('http://', 'https://'), { responseType: 'blob' })\n    .then(res => res.data)\n    .then(fileToDataURL)\n    .then(dataURL => Object.assign(img, { dataURL }))\n}\n\nconst unsplash = {\n  download(id) {\n    return client\n      .get(`/unsplash/download/${id}`)\n      .then(res => res.data.url)\n      .then(url => client.get(url, { responseType: 'blob' }))\n      .then(res => res.data)\n  },\n  async random() {\n    const imageUrls = await client.get('/unsplash/random')\n    return Promise.all(imageUrls.data.map(downloadThumbnailImage))\n  }\n}\n\nexport default {\n  gist: {\n    get: getGist\n  },\n  tweet: debounce(tweet, ms('5s'), { leading: true, trailing: false }),\n  image: debounce(image, ms('5s'), { leading: true, trailing: false }),\n  unsplash,\n  downloadThumbnailImage\n}\n"]},"metadata":{},"sourceType":"module"}