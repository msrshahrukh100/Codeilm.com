{"ast":null,"code":"import _classCallCheck from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/src/components/Map/Map.js\";\nimport React, { Component } from \"react\";\nimport { geoMercator, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport worlddata from './static/world-10m';\nimport { COLORS } from '../../extras/Constants/Constants';\n\nvar WorldMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WorldMap, _Component);\n\n  function WorldMap() {\n    var _this;\n\n    _classCallCheck(this, WorldMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WorldMap).call(this));\n    _this.state = {\n      worlddata: []\n    };\n    _this.handleCountryClick = _this.handleCountryClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMarkerClick = _this.handleMarkerClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(WorldMap, [{\n    key: \"projection\",\n    value: function projection() {\n      return geoMercator().scale(100).translate([800 / 2, 450 / 2]);\n    }\n  }, {\n    key: \"handleCountryClick\",\n    value: function handleCountryClick(countryIndex) {\n      console.log(\"Clicked on country: \", this.state.worlddata[countryIndex]);\n    }\n  }, {\n    key: \"handleMarkerClick\",\n    value: function handleMarkerClick(i) {\n      console.log(\"Marker: \", this.state.cities[i]);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        worlddata: feature(worlddata, worlddata.objects.countries).features\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"svg\", {\n        style: {\n          width: '80%',\n          height: '45%'\n        },\n        viewBox: \"0 0 800 450\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"g\", {\n        className: \"countries\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, this.state.worlddata.map(function (d, i) {\n        return React.createElement(\"path\", {\n          key: \"path-\".concat(i),\n          d: geoPath().projection(_this2.projection())(d),\n          className: \"country\",\n          fill: \"#2196f3\",\n          stroke: \"#fafafa\",\n          strokeWidth: 0.2,\n          onClick: function onClick() {\n            return _this2.handleCountryClick(i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      })), React.createElement(\"g\", {\n        className: \"markers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this.props.mapData ? this.props.mapData.map(function (city, i) {\n        var color = COLORS[Math.floor(Math.random() * COLORS.length)];\n        return React.createElement(\"circle\", {\n          key: \"marker-\".concat(i),\n          cx: _this2.projection()(city.coordinates)[0],\n          cy: _this2.projection()(city.coordinates)[1],\n          r: 2,\n          fill: color,\n          stroke: color,\n          className: \"marker\",\n          onClick: function onClick() {\n            return _this2.handleMarkerClick(i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        });\n      }) : null));\n    }\n  }]);\n\n  return WorldMap;\n}(Component);\n\nexport default WorldMap;","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/src/components/Map/Map.js"],"names":["React","Component","geoMercator","geoPath","feature","worlddata","COLORS","WorldMap","state","handleCountryClick","bind","handleMarkerClick","scale","translate","countryIndex","console","log","i","cities","setState","objects","countries","features","width","height","map","d","projection","props","mapData","city","color","Math","floor","random","length","coordinates"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { geoMercator, geoPath } from \"d3-geo\"\nimport { feature } from \"topojson-client\"\nimport worlddata from './static/world-10m'\nimport { COLORS } from '../../extras/Constants/Constants'\n\nclass WorldMap extends Component {\n  constructor() {\n    super()\n    this.state = {\n      worlddata: []\n    }\n\n    this.handleCountryClick = this.handleCountryClick.bind(this)\n    this.handleMarkerClick = this.handleMarkerClick.bind(this)\n  }\n  projection() {\n    return geoMercator()\n      .scale(100)\n      .translate([ 800 / 2, 450 / 2 ])\n  }\n  handleCountryClick(countryIndex) {\n    console.log(\"Clicked on country: \", this.state.worlddata[countryIndex])\n  }\n  handleMarkerClick(i) {\n    console.log(\"Marker: \", this.state.cities[i])\n  }\n  componentDidMount() {\n    this.setState({\n      worlddata: feature(worlddata, worlddata.objects.countries).features,\n    })\n  }\n  render() {\n    return (\n\n      <svg style={{width: '80%', height: '45%'}} viewBox=\"0 0 800 450\">\n        <g className=\"countries\">\n          {\n            this.state.worlddata.map((d,i) => (\n              <path\n                key={ `path-${ i }` }\n                d={ geoPath().projection(this.projection())(d) }\n                className=\"country\"\n                fill=\"#2196f3\"\n                stroke=\"#fafafa\"\n                strokeWidth={ 0.2 }\n                onClick={ () => this.handleCountryClick(i) }\n              />\n            ))\n          }\n        </g>\n\n        <g className=\"markers\">\n          {\n            this.props.mapData ? this.props.mapData.map((city, i) => {\n              const color = COLORS[Math.floor(Math.random()*COLORS.length)]\n              return (\n                <circle\n                key={ `marker-${i}` }\n                cx={ this.projection()(city.coordinates)[0] }\n                cy={ this.projection()(city.coordinates)[1] }\n                r={ 2 }\n                fill={color}\n                stroke={color}\n                className=\"marker\"\n                onClick={ () => this.handleMarkerClick(i) }\n                />\n              )\n            }\n          )\n            : null\n          }\n        </g>\n      </svg>\n    )\n  }\n}\n\nexport default WorldMap\n"]},"metadata":{},"sourceType":"module"}