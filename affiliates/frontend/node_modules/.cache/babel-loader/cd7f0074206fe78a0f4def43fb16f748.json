{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"velocity\", function () {\n    function parseWords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" + \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" + \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next(); // start of unparsed string?\n\n      if (ch == \"'\" && !state.inString && state.inParams) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenString(ch));\n      } // start of parsed string?\n      else if (ch == '\"') {\n          state.lastTokenWasBuiltin = false;\n\n          if (state.inString) {\n            state.inString = false;\n            return \"string\";\n          } else if (state.inParams) return chain(stream, state, tokenString(ch));\n        } // is it one of the special signs []{}().,;? Seperator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") {\n              state.inParams = false;\n              state.lastTokenWasBuiltin = true;\n            }\n            return null;\n          } // start of a number value?\n          else if (/\\d/.test(ch)) {\n              state.lastTokenWasBuiltin = false;\n              stream.eatWhile(/[\\w\\.]/);\n              return \"number\";\n            } // multi line comment?\n            else if (ch == \"#\" && stream.eat(\"*\")) {\n                state.lastTokenWasBuiltin = false;\n                return chain(stream, state, tokenComment);\n              } // unparsed content?\n              else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n                  state.lastTokenWasBuiltin = false;\n                  return chain(stream, state, tokenUnparsed);\n                } // single line comment?\n                else if (ch == \"#\" && stream.eat(\"#\")) {\n                    state.lastTokenWasBuiltin = false;\n                    stream.skipToEnd();\n                    return \"comment\";\n                  } // variable?\n                  else if (ch == \"$\") {\n                      stream.eatWhile(/[\\w\\d\\$_\\.{}-]/); // is it one of the specials?\n\n                      if (specials && specials.propertyIsEnumerable(stream.current())) {\n                        return \"keyword\";\n                      } else {\n                        state.lastTokenWasBuiltin = true;\n                        state.beforeParams = true;\n                        return \"builtin\";\n                      }\n                    } // is it a operator?\n                    else if (isOperatorChar.test(ch)) {\n                        state.lastTokenWasBuiltin = false;\n                        stream.eatWhile(isOperatorChar);\n                        return \"operator\";\n                      } else {\n                        // get the whole word\n                        stream.eatWhile(/[\\w\\$_{}@]/);\n                        var word = stream.current(); // is it one of the listed keywords?\n\n                        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\"; // is it one of the listed functions?\n\n                        if (functions && functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == \"(\" && !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                          state.beforeParams = true;\n                          state.lastTokenWasBuiltin = false;\n                          return \"keyword\";\n                        }\n\n                        if (state.inString) {\n                          state.lastTokenWasBuiltin = false;\n                          return \"string\";\n                        }\n\n                        if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == \".\" && state.lastTokenWasBuiltin) return \"builtin\"; // default: just a \"word\"\n\n                        state.lastTokenWasBuiltin = false;\n                        return null;\n                      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          if (quote == '\"' && stream.peek() == '$' && !escaped) {\n            state.inString = true;\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n\n      return \"meta\";\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false,\n          inString: false,\n          lastTokenWasBuiltin: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"#*\",\n      blockCommentEnd: \"*#\",\n      lineComment: \"##\",\n      fold: \"velocity\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n});","map":null,"metadata":{},"sourceType":"script"}