{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function forEach(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      f(arr[i], i);\n    }\n  }\n\n  function some(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      if (f(arr[i], i)) return true;\n    }\n\n    return false;\n  }\n\n  CodeMirror.defineMode(\"dylan\", function (_config) {\n    // Words\n    var words = {\n      // Words that introduce unnamed definitions like \"define interface\"\n      unnamedDefinition: [\"interface\"],\n      // Words that introduce simple named definitions like \"define library\"\n      namedDefinition: [\"module\", \"library\", \"macro\", \"C-struct\", \"C-union\", \"C-function\", \"C-callable-wrapper\"],\n      // Words that introduce type definitions like \"define class\".\n      // These are also parameterized like \"define method\" and are\n      // appended to otherParameterizedDefinitionWords\n      typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n      // Words that introduce trickier definitions like \"define method\".\n      // These require special definitions to be added to startExpressions\n      otherParameterizedDefinition: [\"method\", \"function\", \"C-variable\", \"C-address\"],\n      // Words that introduce module constant definitions.\n      // These must also be simple definitions and are\n      // appended to otherSimpleDefinitionWords\n      constantSimpleDefinition: [\"constant\"],\n      // Words that introduce module variable definitions.\n      // These must also be simple definitions and are\n      // appended to otherSimpleDefinitionWords\n      variableSimpleDefinition: [\"variable\"],\n      // Other words that introduce simple definitions\n      // (without implicit bodies).\n      otherSimpleDefinition: [\"generic\", \"domain\", \"C-pointer-type\", \"table\"],\n      // Words that begin statements with implicit bodies.\n      statement: [\"if\", \"block\", \"begin\", \"method\", \"case\", \"for\", \"select\", \"when\", \"unless\", \"until\", \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"],\n      // Patterns that act as separators in compound statements.\n      // This may include any general pattern that must be indented\n      // specially.\n      separator: [\"finally\", \"exception\", \"cleanup\", \"else\", \"elseif\", \"afterwards\"],\n      // Keywords that do not require special indentation handling,\n      // but which should be highlighted\n      other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\", \"instance\", \"let\", \"local\", \"otherwise\", \"slot\", \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"],\n      // Condition signaling function calls\n      signalingCalls: [\"signal\", \"error\", \"cerror\", \"break\", \"check-type\", \"abort\"]\n    };\n    words[\"otherDefinition\"] = words[\"unnamedDefinition\"].concat(words[\"namedDefinition\"]).concat(words[\"otherParameterizedDefinition\"]);\n    words[\"definition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherDefinition\"]);\n    words[\"parameterizedDefinition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherParameterizedDefinition\"]);\n    words[\"simpleDefinition\"] = words[\"constantSimpleDefinition\"].concat(words[\"variableSimpleDefinition\"]).concat(words[\"otherSimpleDefinition\"]);\n    words[\"keyword\"] = words[\"statement\"].concat(words[\"separator\"]).concat(words[\"other\"]); // Patterns\n\n    var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n    var symbol = new RegExp(\"^\" + symbolPattern);\n    var patterns = {\n      // Symbols with special syntax\n      symbolKeyword: symbolPattern + \":\",\n      symbolClass: \"<\" + symbolPattern + \">\",\n      symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n      symbolConstant: \"\\\\$\" + symbolPattern\n    };\n    var patternStyles = {\n      symbolKeyword: \"atom\",\n      symbolClass: \"tag\",\n      symbolGlobal: \"variable-2\",\n      symbolConstant: \"variable-3\"\n    }; // Compile all patterns to regular expressions\n\n    for (var patternName in patterns) {\n      if (patterns.hasOwnProperty(patternName)) patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n    } // Names beginning \"with-\" and \"without-\" are commonly\n    // used as statement macro\n\n\n    patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n    var styles = {};\n    styles[\"keyword\"] = \"keyword\";\n    styles[\"definition\"] = \"def\";\n    styles[\"simpleDefinition\"] = \"def\";\n    styles[\"signalingCalls\"] = \"builtin\"; // protected words lookup table\n\n    var wordLookup = {};\n    var styleLookup = {};\n    forEach([\"keyword\", \"definition\", \"simpleDefinition\", \"signalingCalls\"], function (type) {\n      forEach(words[type], function (word) {\n        wordLookup[word] = type;\n        styleLookup[word] = styles[type];\n      });\n    });\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      // String\n      var ch = stream.peek();\n\n      if (ch == \"'\" || ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString(ch, \"string\"));\n      } // Comment\n      else if (ch == \"/\") {\n          stream.next();\n\n          if (stream.eat(\"*\")) {\n            return chain(stream, state, tokenComment);\n          } else if (stream.eat(\"/\")) {\n            stream.skipToEnd();\n            return \"comment\";\n          }\n\n          stream.backUp(1);\n        } // Decimal\n        else if (/[+\\-\\d\\.]/.test(ch)) {\n            if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\\d+/)) {\n              return \"number\";\n            }\n          } // Hash\n          else if (ch == \"#\") {\n              stream.next(); // Symbol with string syntax\n\n              ch = stream.peek();\n\n              if (ch == '\"') {\n                stream.next();\n                return chain(stream, state, tokenString('\"', \"string\"));\n              } // Binary number\n              else if (ch == \"b\") {\n                  stream.next();\n                  stream.eatWhile(/[01]/);\n                  return \"number\";\n                } // Hex number\n                else if (ch == \"x\") {\n                    stream.next();\n                    stream.eatWhile(/[\\da-f]/i);\n                    return \"number\";\n                  } // Octal number\n                  else if (ch == \"o\") {\n                      stream.next();\n                      stream.eatWhile(/[0-7]/);\n                      return \"number\";\n                    } // Token concatenation in macros\n                    else if (ch == '#') {\n                        stream.next();\n                        return \"punctuation\";\n                      } // Sequence literals\n                      else if (ch == '[' || ch == '(') {\n                          stream.next();\n                          return \"bracket\"; // Hash symbol\n                        } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n                          return \"atom\";\n                        } else {\n                          stream.eatWhile(/[-a-zA-Z]/);\n                          return \"error\";\n                        }\n            } else if (ch == \"~\") {\n              stream.next();\n              ch = stream.peek();\n\n              if (ch == \"=\") {\n                stream.next();\n                ch = stream.peek();\n\n                if (ch == \"=\") {\n                  stream.next();\n                  return \"operator\";\n                }\n\n                return \"operator\";\n              }\n\n              return \"operator\";\n            } else if (ch == \":\") {\n              stream.next();\n              ch = stream.peek();\n\n              if (ch == \"=\") {\n                stream.next();\n                return \"operator\";\n              } else if (ch == \":\") {\n                stream.next();\n                return \"punctuation\";\n              }\n            } else if (\"[](){}\".indexOf(ch) != -1) {\n              stream.next();\n              return \"bracket\";\n            } else if (\".,\".indexOf(ch) != -1) {\n              stream.next();\n              return \"punctuation\";\n            } else if (stream.match(\"end\")) {\n              return \"keyword\";\n            }\n\n      for (var name in patterns) {\n        if (patterns.hasOwnProperty(name)) {\n          var pattern = patterns[name];\n          if (pattern instanceof Array && some(pattern, function (p) {\n            return stream.match(p);\n          }) || stream.match(pattern)) return patternStyles[name];\n        }\n      }\n\n      if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n        stream.next();\n        return \"operator\";\n      }\n\n      if (stream.match(\"define\")) {\n        return \"def\";\n      } else {\n        stream.eatWhile(/[\\w\\-]/); // Keyword\n\n        if (wordLookup.hasOwnProperty(stream.current())) {\n          return styleLookup[stream.current()];\n        } else if (stream.current().match(symbol)) {\n          return \"variable\";\n        } else {\n          stream.next();\n          return \"variable-2\";\n        }\n      }\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          maybeNested = false,\n          nestedCount = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          if (nestedCount > 0) {\n            nestedCount--;\n          } else {\n            state.tokenize = tokenBase;\n            break;\n          }\n        } else if (ch == \"*\" && maybeNested) {\n          nestedCount++;\n        }\n\n        maybeEnd = ch == \"*\";\n        maybeNested = ch == \"/\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenString(quote, style) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) {\n          state.tokenize = tokenBase;\n        }\n\n        return style;\n      };\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          currentIndent: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n});","map":null,"metadata":{},"sourceType":"script"}