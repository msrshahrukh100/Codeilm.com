{"ast":null,"code":"var getParsedContent = function getParsedContent(text) {\n  var result = [];\n\n  while (text) {\n    var regex = /\\[Page(.*)\\]([\\S\\s]*?)\\[End\\]/ig;\n    text = text.trim(\"\\n\\r\");\n    var match = regex.exec(text);\n    var temp = {};\n\n    if (match === null) {\n      if (result.length === 0) {\n        return {\n          data: [{\n            title: \"\",\n            content: text\n          }]\n        };\n      } else {\n        return {\n          data: result,\n          msg: {\n            text: \"Some content are not within the [Page] tags\",\n            type: \"error\",\n            \"errorCode\": \"INV_TAG\"\n          }\n        };\n      }\n    }\n\n    text = text.slice(match[0].length);\n    var title = match[1].trim();\n    title = title.slice(1, -1);\n    temp.title = title;\n    temp.content = match[2];\n    result.push(temp);\n  }\n\n  return {\n    \"data\": result\n  };\n};\n\nexport default getParsedContent;","map":{"version":3,"sources":["/home/shahrukh/Code/projects/allywith/Codeilm.com/lovecode/lovecodefrontend/lovecode/src/utils/getParsedContent.js"],"names":["getParsedContent","text","result","regex","trim","match","exec","temp","length","data","title","content","msg","type","slice","push"],"mappings":"AAAA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AAGjC,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAMD,IAAN,EAAW;AACT,QAAIE,KAAK,GAAE,iCAAX;AACAF,IAAAA,IAAI,GAAGA,IAAI,CAACG,IAAL,CAAU,MAAV,CAAP;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACG,IAAN,CAAWL,IAAX,CAAd;AACA,QAAIM,IAAI,GAAG,EAAX;;AACA,QAAGF,KAAK,KAAK,IAAb,EAAmB;AACjB,UAAIH,MAAM,CAACM,MAAP,KAAkB,CAAtB,EAAyB;AACvB,eAAO;AAACC,UAAAA,IAAI,EAAE,CAAC;AAACC,YAAAA,KAAK,EAAE,EAAR;AAAYC,YAAAA,OAAO,EAAEV;AAArB,WAAD;AAAP,SAAP;AACD,OAFD,MAGK;AACH,eAAO;AAACQ,UAAAA,IAAI,EAAEP,MAAP;AAAeU,UAAAA,GAAG,EAAE;AAACX,YAAAA,IAAI,EAAE,6CAAP;AAAsDY,YAAAA,IAAI,EAAE,OAA5D;AAAqE,yBAAa;AAAlF;AAApB,SAAP;AACD;AACF;;AAEDZ,IAAAA,IAAI,GAAGA,IAAI,CAACa,KAAL,CAAWT,KAAK,CAAC,CAAD,CAAL,CAASG,MAApB,CAAP;AACA,QAAIE,KAAK,GAAGL,KAAK,CAAC,CAAD,CAAL,CAASD,IAAT,EAAZ;AACAM,IAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAc,CAAC,CAAf,CAAR;AACAP,IAAAA,IAAI,CAACG,KAAL,GAAaA,KAAb;AACAH,IAAAA,IAAI,CAACI,OAAL,GAAeN,KAAK,CAAC,CAAD,CAApB;AACAH,IAAAA,MAAM,CAACa,IAAP,CAAYR,IAAZ;AACD;;AACD,SAAO;AAAC,YAAQL;AAAT,GAAP;AACD,CA3BD;;AA6BA,eAAeF,gBAAf","sourcesContent":["const getParsedContent = (text) => {\n\n\n  let result = []\n\n  while(text){\n    let regex =/\\[Page(.*)\\]([\\S\\s]*?)\\[End\\]/ig\n    text = text.trim(\"\\n\\r\")\n    const match = regex.exec(text)\n    let temp = {}\n    if(match === null) {\n      if (result.length === 0) {\n        return {data: [{title: \"\", content: text}]}\n      }\n      else {\n        return {data: result, msg: {text: \"Some content are not within the [Page] tags\", type: \"error\", \"errorCode\": \"INV_TAG\"}}\n      }\n    }\n\n    text = text.slice(match[0].length,)\n    let title = match[1].trim()\n    title = title.slice(1,-1)\n    temp.title = title\n    temp.content = match[2]\n    result.push(temp)\n  }\n  return {\"data\": result}\n}\n\nexport default getParsedContent\n"]},"metadata":{},"sourceType":"module"}